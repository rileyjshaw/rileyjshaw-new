{"version":3,"sources":["webpack:///./src/components/grid-doodles.js","webpack:///./src/components/project-explorer.js","webpack:///./src/pages/lab.js"],"names":["React","forwardRef","props","ref","El","className","split","map","letter","i","length","key","style","animationDelay","size","classPrefix","OuterElement","ms","month","Date","getMonth","today","getDate","Component","chance","fn","Math","random","SAVED_PROPERTIES","ProjectExplorer","getNodeTypes","state","nodeTypes","refreshDisplayNodes","setState","window","forEach","localStorage","setItem","JSON","stringify","nodes","getDisplayNodes","shuffleDisplayNodes","shuffle","handleSortMethodChange","sortIdx","handleFilterTypeChange","e","filterType","target","value","handleTypeStateChange","typeIdx","checked","typeStates","updatedTypeStates","handleClearTypesClick","Array","fill","handleTagStateChange","tagIdx","tagStates","updatedTagStates","handleClearTagsClick","tags","handleAscendingChange","ascending","from","Set","n","type","sort","a","b","localeCompare","initialState","drawerOpen","getItem","join","savedValue","parse","removeItem","sortFn","sortingMethods","checkedTypeNames","this","filter","_","checkedTagNames","tag","name","node","includes","reduce","partitions","push","doodles","filteredByType","sorted","tagName","ordered","reverse","doodle","shouldRender","splice","floor","render","nSources","onClick","id","onChange","htmlFor","contentTypes","readableType","title","toUpperCase","slice","LazyGrid","setIsFullyLoaded","PureComponent","useState","renderLimit","setRenderLimit","useInView","inView","entry","useEffect","boundingClientRect","bottom","l","masonry","useStaticQuery","allTagsJson","allProjectsQuery","concat","gridDoodles","uid","Doodle","LabPage","location","isFullyLoaded","fromPage","quoteId"],"mappings":"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","file":"component---src-pages-lab-js-2e9b32f0d35a4de40949.js","sourcesContent":["import React from 'react';\n\nimport TextGrid from './text-grid';\nimport CycleText from './cycle-text';\nimport BackgroundGenerator from './doodles/background-generator';\nimport CircleConstrainedLines from './doodles/circle-constrained-lines';\n\nimport './grid-doodles.css';\n\nexport default [\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<BackgroundGenerator El=\"li\" ref={ref} {...props} />\n\t\t)),\n\t\t0.8,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<CircleConstrainedLines El=\"li\" ref={ref} {...props} />\n\t\t)),\n\t\t1,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<li className=\"doodle wavytext\" ref={ref}>\n\t\t\t\t{'rileyjshaw'.split('').map((letter, i, {length}) => (\n\t\t\t\t\t<span\n\t\t\t\t\t\tkey={`wavytext-${i}`}\n\t\t\t\t\t\tstyle={{animationDelay: `${(i - length) * 0.2}s`}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{letter}\n\t\t\t\t\t</span>\n\t\t\t\t))}\n\t\t\t</li>\n\t\t)),\n\t\t0.2,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<TextGrid\n\t\t\t\tsize={[3, 3]}\n\t\t\t\tclassPrefix=\"doingreat\"\n\t\t\t\tclassName=\"content-node doodle\"\n\t\t\t\tOuterElement=\"li\"\n\t\t\t\t{...props}\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\tDOINGREAT\n\t\t\t</TextGrid>\n\t\t)),\n\t\t0.1,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<CycleText\n\t\t\t\tclassPrefix=\"wavebump\"\n\t\t\t\tclassName=\"content-node doodle\"\n\t\t\t\tms={50}\n\t\t\t\tOuterElement=\"li\"\n\t\t\t\t{...props}\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\t▁▂▃▅▆▇▇▆▅▃▂▁\n\t\t\t</CycleText>\n\t\t)),\n\t\t0.3,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<CycleText\n\t\t\t\tclassPrefix=\"droplet\"\n\t\t\t\tclassName=\"content-node doodle\"\n\t\t\t\tms={150}\n\t\t\t\tOuterElement=\"li\"\n\t\t\t\t{...props}\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\t⊙⊚⦾⊛\n\t\t\t</CycleText>\n\t\t)),\n\t\t0.2,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<CycleText\n\t\t\t\tclassPrefix=\"circles\"\n\t\t\t\tclassName=\"content-node doodle\"\n\t\t\t\tms={100}\n\t\t\t\tsize={[2, 2]}\n\t\t\t\tOuterElement=\"li\"\n\t\t\t\t{...props}\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\t◯⦿◉◎\n\t\t\t</CycleText>\n\t\t)),\n\t\t0.2,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<li className=\"content-node snowman doodle\" {...props} ref={ref}>\n\t\t\t\t☃\n\t\t\t</li>\n\t\t)),\n\t\t0.3,\n\t\t() => {\n\t\t\tconst month = new Date().getMonth();\n\t\t\treturn month < 4 || month === 11;\n\t\t},\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<CycleText\n\t\t\t\tclassPrefix=\"wavebump\"\n\t\t\t\tclassName=\"content-node tall doodle\"\n\t\t\t\tms={400}\n\t\t\t\tOuterElement=\"li\"\n\t\t\t\t{...props}\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\tSecret message!\n\t\t\t</CycleText>\n\t\t)),\n\t\t0.05,\n\t\t() => {\n\t\t\tconst today = new Date();\n\t\t\treturn today.getMonth() === 11 && today.getDate() === 25;\n\t\t},\n\t],\n].map(([Component, chance, fn]) => [\n\tComponent,\n\tfn ? () => fn() || Math.random() < chance : () => Math.random() < chance,\n]);\n","// TODO(RILEY): https://tympanus.net/Development/TiltHoverEffects/index.html\nimport React, {Fragment, useState, useEffect} from 'react';\nimport {useStaticQuery, graphql} from 'gatsby';\n\nimport sortingMethods, {shuffle} from '../util/sorting-methods';\nimport allProjectsQuery from '../util/all-projects-query';\nimport contentTypes from '../util/content-types';\nimport {useInView} from '../util/hooks';\n\nimport gridDoodles from './grid-doodles';\nimport ContentGrid from './content-grid';\n\nimport './project-explorer.css';\n\n// TODO(riley): Get rid of the class component, switch to useStickyState.\nconst SAVED_PROPERTIES = [\n\t'typeStates',\n\t'sortIdx',\n\t'ascending',\n\t'filterType',\n\t'tagStates',\n];\nclass ProjectExplorer extends React.PureComponent {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tconst nodeTypes = Array.from(\n\t\t\tnew Set(this.props.nodes.map(n => n.type))\n\t\t).sort((a, b) => a.localeCompare(b));\n\n\t\tconst initialState = {\n\t\t\tnodeTypes,\n\t\t\ttypeStates: Array.from(nodeTypes).fill(true),\n\t\t\tsortIdx: 0,\n\t\t\tascending: false,\n\t\t\tfilterType: 'any',\n\t\t\ttagStates: Array.from(props.tags).fill(false),\n\t\t\tdrawerOpen: false,\n\t\t};\n\n\t\tif (typeof window !== 'undefined') {\n\t\t\tif (\n\t\t\t\twindow.localStorage.getItem('LAB_V1_nodeTypes') ===\n\t\t\t\tinitialState.nodeTypes.join('')\n\t\t\t) {\n\t\t\t\tSAVED_PROPERTIES.forEach(key => {\n\t\t\t\t\tconst savedValue = JSON.parse(\n\t\t\t\t\t\twindow.localStorage.getItem(`LAB_V1_${key}`)\n\t\t\t\t\t);\n\t\t\t\t\tif (savedValue != null) initialState[key] = savedValue;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\twindow.localStorage.setItem(\n\t\t\t\t\t'LAB_V1_nodeTypes',\n\t\t\t\t\tinitialState.nodeTypes.join('')\n\t\t\t\t);\n\t\t\t\tSAVED_PROPERTIES.forEach(key =>\n\t\t\t\t\twindow.localStorage.removeItem(`LAB_V1_${key}`)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis.state = {\n\t\t\t...initialState,\n\t\t\tnodes: this.getDisplayNodes(initialState, props),\n\t\t};\n\t}\n\n\t// HACK(riley): Better to not use state and memoize this on `props.nodes`.\n\tgetNodeTypes = (state = this.state) => state.nodeTypes;\n\n\tgetDisplayNodes(state, {tags, nodes}) {\n\t\tconst {sortFn} = sortingMethods[state.sortIdx];\n\t\tconst checkedTypeNames = this.getNodeTypes(state).filter(\n\t\t\t(_, i) => state.typeStates[i]\n\t\t);\n\t\tconst checkedTagNames = tags\n\t\t\t.filter((_, i) => state.tagStates[i])\n\t\t\t.map(tag => tag.name);\n\t\tconst [doodles, filteredByType] = (checkedTypeNames.length\n\t\t\t? nodes.filter(node => checkedTypeNames.includes(node.type))\n\t\t\t: nodes\n\t\t).reduce(\n\t\t\t(partitions, node) => {\n\t\t\t\tpartitions[node.type === 'doodle' ? 0 : 1].push(node);\n\t\t\t\treturn partitions;\n\t\t\t},\n\t\t\t[[], []]\n\t\t);\n\t\tconst filtered = checkedTagNames.length\n\t\t\t? filteredByType.filter(node =>\n\t\t\t\t\tcheckedTagNames[\n\t\t\t\t\t\tstate.filterType === 'any' ? 'some' : 'every'\n\t\t\t\t\t](tagName => node.tags && node.tags.includes(tagName))\n\t\t\t  )\n\t\t\t: filteredByType;\n\t\tconst sorted = sortFn(filtered);\n\t\tconst ordered = state.ascending ? sorted.reverse() : sorted;\n\t\t// Insert a few doodles into a random position.\n\t\tdoodles\n\t\t\t.filter(doodle => doodle.shouldRender())\n\t\t\t.forEach(doodle => {\n\t\t\t\tordered.splice(\n\t\t\t\t\tMath.floor(Math.random() * ordered.length),\n\t\t\t\t\t0,\n\t\t\t\t\tdoodle\n\t\t\t\t);\n\t\t\t});\n\t\treturn ordered;\n\t}\n\n\trefreshDisplayNodes = () => {\n\t\tthis.setState((state, props) => {\n\t\t\tif (typeof window !== 'undefined') {\n\t\t\t\tSAVED_PROPERTIES.forEach(key =>\n\t\t\t\t\twindow.localStorage.setItem(\n\t\t\t\t\t\t`LAB_V1_${key}`,\n\t\t\t\t\t\tJSON.stringify(state[key])\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tnodes: this.getDisplayNodes(state, props),\n\t\t\t};\n\t\t});\n\t};\n\n\tshuffleDisplayNodes = () => {\n\t\tthis.setState(({nodes}) => {\n\t\t\treturn {nodes: shuffle(nodes)};\n\t\t});\n\t};\n\n\thandleSortMethodChange = sortIdx => {\n\t\tthis.setState({sortIdx}, this.refreshDisplayNodes);\n\t};\n\n\thandleFilterTypeChange = e => {\n\t\tthis.setState({filterType: e.target.value}, this.refreshDisplayNodes);\n\t};\n\n\thandleTypeStateChange = (e, typeIdx) => {\n\t\tconst {checked} = e.target;\n\t\tthis.setState(({typeStates}) => {\n\t\t\tconst updatedTypeStates = [...typeStates];\n\t\t\tupdatedTypeStates[typeIdx] = checked;\n\t\t\treturn {typeStates: updatedTypeStates};\n\t\t}, this.refreshDisplayNodes);\n\t};\n\n\thandleClearTypesClick = () => {\n\t\tthis.setState(\n\t\t\t{typeStates: new Array(this.getNodeTypes().length).fill(false)},\n\t\t\tthis.refreshDisplayNodes\n\t\t);\n\t};\n\n\thandleTagStateChange = (e, tagIdx) => {\n\t\tconst {checked} = e.target;\n\t\tthis.setState(({tagStates}) => {\n\t\t\tconst updatedTagStates = [...tagStates];\n\t\t\tupdatedTagStates[tagIdx] = checked;\n\t\t\treturn {tagStates: updatedTagStates};\n\t\t}, this.refreshDisplayNodes);\n\t};\n\n\thandleClearTagsClick = () => {\n\t\tthis.setState(\n\t\t\t{tagStates: new Array(this.props.tags.length).fill(false)},\n\t\t\tthis.refreshDisplayNodes\n\t\t);\n\t};\n\n\thandleAscendingChange = e => {\n\t\tthis.setState({ascending: e.target.checked}, this.refreshDisplayNodes);\n\t};\n\n\trender() {\n\t\t// const {tags} = this.props;\n\t\tconst {nodes} = this.state;\n\t\tconst nSources =\n\t\t\tthis.state.typeStates.reduce((a, b) => a + b) ||\n\t\t\tthis.state.typeStates.length;\n\t\treturn (\n\t\t\t<div className=\"project-explorer\">\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"project-explorer-hide-filters\"\n\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\tthis.setState(({drawerOpen}) => ({\n\t\t\t\t\t\t\tdrawerOpen: !drawerOpen,\n\t\t\t\t\t\t}))\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\t{this.state.drawerOpen\n\t\t\t\t\t\t? 'Hide filters ▲'\n\t\t\t\t\t\t: 'Show filters ▼'}\n\t\t\t\t</button>\n\t\t\t\t<div className=\"filters\">\n\t\t\t\t\t{this.state.drawerOpen && (\n\t\t\t\t\t\t/* TODO(riley): Once display: contents or display:\n\t\t\t\t\t\tsubgrid have good support, replace <p.legend> with\n\t\t\t\t\t\t<legend>, get rid of the .inputs wrappers, and nest\n\t\t\t\t\t\t<fieldset>s (display: contents) around each <legend> /\n\t\t\t\t\t\t.inputs / button set. Until then, the children need to\n\t\t\t\t\t\tbe direct descendents of the grid, and a11y takes a\n\t\t\t\t\t\thit. */\n\t\t\t\t\t\t<div className=\"controls\">\n\t\t\t\t\t\t\t<p className=\"legend\">Show:</p>\n\t\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t\t{this.getNodeTypes().map((type, i) => (\n\t\t\t\t\t\t\t\t\t<Fragment key={type}>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tname={`labs-types-${type}`}\n\t\t\t\t\t\t\t\t\t\t\tid={`labs-types-${type}`}\n\t\t\t\t\t\t\t\t\t\t\tvalue={type}\n\t\t\t\t\t\t\t\t\t\t\tchecked={this.state.typeStates[i]}\n\t\t\t\t\t\t\t\t\t\t\tonChange={e =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.handleTypeStateChange(\n\t\t\t\t\t\t\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\t\t\t\t\t\t\ti\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<label htmlFor={`labs-types-${type}`}>\n\t\t\t\t\t\t\t\t\t\t\t{contentTypes[type].readableType}s\n\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"labs-clear labs-clear-types\"\n\t\t\t\t\t\t\t\tonClick={this.handleClearTypesClick}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t✖\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<p className=\"legend\">Sort by:</p>\n\t\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t\t{sortingMethods.map(({title}, i) => (\n\t\t\t\t\t\t\t\t\t<Fragment key={title}>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\t\t\t\t\tname={`labs-sort-${title}`}\n\t\t\t\t\t\t\t\t\t\t\tid={`labs-sort-${title}`}\n\t\t\t\t\t\t\t\t\t\t\tvalue={title}\n\t\t\t\t\t\t\t\t\t\t\tchecked={this.state.sortIdx === i}\n\t\t\t\t\t\t\t\t\t\t\tonChange={() =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.handleSortMethodChange(i)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<label htmlFor={`labs-sort-${title}`}>\n\t\t\t\t\t\t\t\t\t\t\t{title.toUpperCase().slice(0, 1) +\n\t\t\t\t\t\t\t\t\t\t\t\ttitle.slice(1)}\n\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<p className=\"legend\">Order:</p>\n\t\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\tname=\"labs-order\"\n\t\t\t\t\t\t\t\t\tid=\"labs-order\"\n\t\t\t\t\t\t\t\t\tvalue=\"ascending\"\n\t\t\t\t\t\t\t\t\tchecked={this.state.ascending}\n\t\t\t\t\t\t\t\t\tonChange={this.handleAscendingChange}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<label htmlFor=\"labs-order\">Reverse</label>\n\t\t\t\t\t\t\t\t<button onClick={this.shuffleDisplayNodes}>\n\t\t\t\t\t\t\t\t\tShuffle\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{/* <p className=\"legend\">Match:</p>\n\t\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\t\t\tname=\"labs-filter-any\"\n\t\t\t\t\t\t\t\t\tid=\"labs-filter-any\"\n\t\t\t\t\t\t\t\t\tvalue=\"any\"\n\t\t\t\t\t\t\t\t\tchecked={this.state.filterType === 'any'}\n\t\t\t\t\t\t\t\t\tonChange={this.handleFilterTypeChange}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<label htmlFor=\"labs-filter-any\">Any</label>\n\t\t\t\t\t\t\t\t|\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\t\t\tname=\"labs-filter-all\"\n\t\t\t\t\t\t\t\t\tid=\"labs-filter-all\"\n\t\t\t\t\t\t\t\t\tvalue=\"all\"\n\t\t\t\t\t\t\t\t\tchecked={this.state.filterType === 'all'}\n\t\t\t\t\t\t\t\t\tonChange={this.handleFilterTypeChange}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<label htmlFor=\"labs-filter-all\">All</label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<p className=\"legend\">Of:</p>\n\t\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t\t{tags.map((tag, i) => (\n\t\t\t\t\t\t\t\t\t<Fragment key={tag.name}>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tname={`labs-tags-${tag.name}`}\n\t\t\t\t\t\t\t\t\t\t\tid={`labs-tags-${tag.name}`}\n\t\t\t\t\t\t\t\t\t\t\tvalue={tag.name}\n\t\t\t\t\t\t\t\t\t\t\tchecked={this.state.tagStates[i]}\n\t\t\t\t\t\t\t\t\t\t\tonChange={e =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.handleTagStateChange(e, i)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<label\n\t\t\t\t\t\t\t\t\t\t\thtmlFor={`labs-tags-${tag.name}`}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{tag.readable}\n\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"labs-clear labs-clear-tags\"\n\t\t\t\t\t\t\t\tonClick={this.handleClearTagsClick}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t✖\n\t\t\t\t\t\t\t</button> */}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t<p className=\"result-details\">\n\t\t\t\t\tFound <strong>{nodes.length}</strong> entries from{' '}\n\t\t\t\t\t<strong>{nSources}</strong> source\n\t\t\t\t\t{nSources === 1 ? '' : 's'}:\n\t\t\t\t</p>\n\t\t\t\t<LazyGrid\n\t\t\t\t\tnodes={nodes}\n\t\t\t\t\tsetIsFullyLoaded={this.props.setIsFullyLoaded}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// TODO(riley): Ensure this lazy-loading works with a screen reader.\nfunction LazyGrid({nodes, setIsFullyLoaded}) {\n\tconst [renderLimit, setRenderLimit] = useState(20);\n\tconst [ref, inView, entry] = useInView();\n\t// If the last node is on or above the viewport, load the next 20 nodes.\n\t// Note that the “last” node might be higher up on the page, eg. if it has\n\t// a small footprint and squeezes into some top row masonry. Hence the on\n\t// *or above* the viewport check.\n\tuseEffect(() => {\n\t\tif (\n\t\t\t(inView || (entry?.boundingClientRect?.bottom ?? 1) <= 0) &&\n\t\t\trenderLimit < nodes.length\n\t\t) {\n\t\t\tsetRenderLimit(l => l + 20);\n\t\t}\n\t}, [inView, entry?.boundingClientRect?.bottom]);\n\tuseEffect(() => {\n\t\tsetRenderLimit(20);\n\t}, [nodes.length]);\n\tuseEffect(() => {\n\t\tsetIsFullyLoaded && setIsFullyLoaded(renderLimit >= nodes.length);\n\t}, [nodes.length, renderLimit]);\n\n\treturn (\n\t\t<ContentGrid masonry nodes={nodes.slice(0, renderLimit)} ref={ref} />\n\t);\n}\n\nexport default props => {\n\tconst {\n\t\tallTagsJson: {nodes: tags},\n\t} = useStaticQuery(graphql`\n\t\t{\n\t\t\tallTagsJson {\n\t\t\t\tnodes {\n\t\t\t\t\tname\n\t\t\t\t\treadable\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`);\n\n\tconst nodes = allProjectsQuery().concat(\n\t\tgridDoodles.map(([Doodle, shouldRender], i) => ({\n\t\t\tuid: `DOODLE_${i}`,\n\t\t\ttype: 'doodle',\n\t\t\tDoodle,\n\t\t\tshouldRender,\n\t\t}))\n\t);\n\n\treturn <ProjectExplorer nodes={nodes} tags={tags} {...props} />;\n};\n","import React, {useState} from 'react';\n\nimport BigQuote from '../components/big-quote';\nimport GoUp from '../components/go-up';\nimport Layout from '../components/layout';\nimport PageHeader from '../components/page-header';\nimport ProjectExplorer from '../components/project-explorer';\nimport SEO from '../components/seo';\n\nconst LabPage = ({location}) => {\n\tconst [isFullyLoaded, setIsFullyLoaded] = useState(false);\n\n\treturn (\n\t\t<Layout>\n\t\t\t<SEO title=\"Lab\" />\n\t\t\t<PageHeader fromPage={location?.state?.fromPage}>Lab</PageHeader>\n\t\t\t<ProjectExplorer setIsFullyLoaded={setIsFullyLoaded} />\n\t\t\t{isFullyLoaded && (\n\t\t\t\t<>\n\t\t\t\t\t<BigQuote quoteId=\"VOLTAIRE_BORING\" />\n\t\t\t\t\t<GoUp />\n\t\t\t\t</>\n\t\t\t)}\n\t\t</Layout>\n\t);\n};\n\nexport default LabPage;\n"],"sourceRoot":""}