{"version":3,"sources":["webpack:///./src/components/grid-doodles.js","webpack:///./src/components/project-explorer.js","webpack:///./src/pages/lab.js"],"names":["React","forwardRef","props","ref","El","className","split","map","letter","i","length","key","style","animationDelay","size","classPrefix","OuterElement","ms","colorScheme","month","Date","getMonth","today","getDate","Component","chance","fn","Math","random","ProjectExplorer","memo","useMemo","nodeTypes","Array","from","Set","nodes","n","type","sort","a","b","localeCompare","join","sortingMethods","version","useState","drawerOpen","setDrawerOpen","useStickyState","STORAGE_KEYS","labV2Ascending","ascending","setAscending","labV2SortIdx","sortIdx","setSortIdx","fill","labV2TypeStates","typeStates","setTypeStates","nSources","reduce","sortFn","checkedTypeNames","filter","_","node","includes","partitions","push","doodles","sorted","ordered","reverse","doodle","shouldRender","forEach","splice","floor","onClick","openState","name","id","value","checked","onChange","e","target","prevTypeStates","updatedTypeStates","htmlFor","contentTypes","readableType","title","toUpperCase","slice","LazyGrid","setIsFullyLoaded","renderLimit","setRenderLimit","useInView","inView","entry","useEffect","boundingClientRect","bottom","l","masonry","ProjectExplorerWrapper","tags","useStaticQuery","allTagsJson","allProjects","allProjectsQuery","concat","gridDoodles","uid","Doodle","LabPage","location","isFullyLoaded","fromPage","state","quoteId"],"mappings":"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","file":"component---src-pages-lab-js-3dc2a2efd98047077e8e.js","sourcesContent":["import CycleText from './cycle-text';\nimport BackgroundGenerator from './doodles/background-generator';\nimport CircleConstrainedLines from './doodles/circle-constrained-lines';\nimport './grid-doodles.css';\nimport TextGrid from './text-grid';\nimport React from 'react';\n\nexport default [\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<BackgroundGenerator El=\"li\" ref={ref} {...props} />\n\t\t)),\n\t\t0.8,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<CircleConstrainedLines El=\"li\" ref={ref} {...props} />\n\t\t)),\n\t\t1,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<li className=\"doodle wavytext\" ref={ref}>\n\t\t\t\t{'rileyjshaw'.split('').map((letter, i, {length}) => (\n\t\t\t\t\t<span\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tstyle={{animationDelay: `${(i - length) * 0.2}s`}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{letter}\n\t\t\t\t\t</span>\n\t\t\t\t))}\n\t\t\t</li>\n\t\t)),\n\t\t0.2,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<TextGrid\n\t\t\t\tsize={[3, 3]}\n\t\t\t\tclassPrefix=\"doingreat\"\n\t\t\t\tclassName=\"content-node doodle\"\n\t\t\t\tOuterElement=\"li\"\n\t\t\t\t{...props}\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\tDOINGREAT\n\t\t\t</TextGrid>\n\t\t)),\n\t\t0.1,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<CycleText\n\t\t\t\tclassPrefix=\"wavebump\"\n\t\t\t\tclassName=\"content-node doodle\"\n\t\t\t\tms={50}\n\t\t\t\tOuterElement=\"li\"\n\t\t\t\t{...props}\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\t▁▂▃▅▆▇▇▆▅▃▂▁\n\t\t\t</CycleText>\n\t\t)),\n\t\t0.3,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<CycleText\n\t\t\t\tclassPrefix=\"droplet\"\n\t\t\t\tclassName={`content-node doodle${\n\t\t\t\t\tprops.colorScheme === 'dark' ? ' dark-scheme' : ''\n\t\t\t\t}`}\n\t\t\t\tms={150}\n\t\t\t\tOuterElement=\"li\"\n\t\t\t\t{...props}\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\t⊙⊚⦾⊛\n\t\t\t</CycleText>\n\t\t)),\n\t\t0.2,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<CycleText\n\t\t\t\tclassPrefix=\"circles\"\n\t\t\t\tclassName=\"content-node doodle\"\n\t\t\t\tms={100}\n\t\t\t\tsize={[2, 2]}\n\t\t\t\tOuterElement=\"li\"\n\t\t\t\t{...props}\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\t◯⦿◉◎\n\t\t\t</CycleText>\n\t\t)),\n\t\t0.2,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<li className=\"content-node snowman doodle\" {...props} ref={ref}>\n\t\t\t\t☃\n\t\t\t</li>\n\t\t)),\n\t\t0.3,\n\t\t() => {\n\t\t\tconst month = new Date().getMonth();\n\t\t\treturn month < 4 || month === 11;\n\t\t},\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<CycleText\n\t\t\t\tclassPrefix=\"wavebump\"\n\t\t\t\tclassName=\"content-node tall doodle\"\n\t\t\t\tms={400}\n\t\t\t\tOuterElement=\"li\"\n\t\t\t\t{...props}\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\tSecret message!\n\t\t\t</CycleText>\n\t\t)),\n\t\t0.05,\n\t\t() => {\n\t\t\tconst today = new Date();\n\t\t\treturn today.getMonth() === 11 && today.getDate() === 25;\n\t\t},\n\t],\n].map(([Component, chance, fn]) => [\n\tComponent,\n\tfn ? () => fn() || Math.random() < chance : () => Math.random() < chance,\n]);\n","// TODO(RILEY): https://tympanus.net/Development/TiltHoverEffects/index.html\nimport allProjectsQuery from '../util/all-projects-query';\nimport {STORAGE_KEYS} from '../util/constants';\nimport contentTypes from '../util/content-types';\nimport {useInView, useStickyState} from '../util/hooks';\nimport sortingMethods, {shuffle} from '../util/sorting-methods';\nimport ContentGrid from './content-grid';\nimport gridDoodles from './grid-doodles';\nimport './project-explorer.css';\nimport {useStaticQuery, graphql} from 'gatsby';\nimport React, {Fragment, useState, useEffect, useMemo} from 'react';\n\nconst ProjectExplorer = React.memo(props => {\n\tconst [nodeTypes, version] = useMemo(() => {\n\t\tconst nodeTypes = Array.from(\n\t\t\tnew Set(props.nodes.map(n => n.type))\n\t\t).sort((a, b) => a.localeCompare(b));\n\t\treturn [nodeTypes, `${nodeTypes.join('')}${sortingMethods.length}`];\n\t}, [props.nodes]);\n\n\tconst [drawerOpen, setDrawerOpen] = useState(false);\n\tconst [ascending, setAscending] = useStickyState(\n\t\tfalse,\n\t\tSTORAGE_KEYS.labV2Ascending,\n\t\t{version}\n\t);\n\tconst [sortIdx, setSortIdx] = useStickyState(\n\t\t0,\n\t\tSTORAGE_KEYS.labV2SortIdx,\n\t\t{\n\t\t\tversion,\n\t\t}\n\t);\n\tconst [typeStates, setTypeStates] = useStickyState(\n\t\t() => Array.from(nodeTypes).fill(true),\n\t\tSTORAGE_KEYS.labV2TypeStates,\n\t\t{version}\n\t);\n\n\tconst nSources = typeStates.reduce((a, b) => a + b) || typeStates.length;\n\n\tconst nodes = useMemo(() => {\n\t\tconst {sortFn} = sortingMethods[sortIdx];\n\t\tconst checkedTypeNames = nodeTypes.filter((_, i) => typeStates[i]);\n\t\tconst [doodles, filtered] = (checkedTypeNames.length\n\t\t\t? props.nodes.filter(node => checkedTypeNames.includes(node.type))\n\t\t\t: props.nodes\n\t\t).reduce(\n\t\t\t(partitions, node) => {\n\t\t\t\tpartitions[node.type === 'doodle' ? 0 : 1].push(node);\n\t\t\t\treturn partitions;\n\t\t\t},\n\t\t\t[[], []]\n\t\t);\n\t\tconst sorted = sortFn(filtered);\n\t\tconst ordered = ascending ? sorted.reverse() : sorted;\n\t\t// Insert a few doodles into a random position.\n\t\tdoodles\n\t\t\t.filter(doodle => doodle.shouldRender())\n\t\t\t.forEach(doodle => {\n\t\t\t\tordered.splice(\n\t\t\t\t\tMath.floor(Math.random() * ordered.length),\n\t\t\t\t\t0,\n\t\t\t\t\tdoodle\n\t\t\t\t);\n\t\t\t});\n\t\treturn ordered;\n\t}, [ascending, sortIdx, typeStates, props.nodes]);\n\n\treturn (\n\t\t<div className=\"project-explorer\">\n\t\t\t<button\n\t\t\t\tclassName=\"project-explorer-hide-filters\"\n\t\t\t\tonClick={() => setDrawerOpen(openState => !openState)}\n\t\t\t>\n\t\t\t\t{drawerOpen ? 'Hide filters ▲' : 'Show filters ▼'}\n\t\t\t</button>\n\t\t\t<div className=\"filters\">\n\t\t\t\t{drawerOpen && (\n\t\t\t\t\t/* TODO(riley): Once display: contents or display:\n\t\t\t\tsubgrid have good support, replace <p.legend> with\n\t\t\t\t<legend>, get rid of the .inputs wrappers, and nest\n\t\t\t\t<fieldset>s (display: contents) around each <legend> /\n\t\t\t\t.inputs / button set. Until then, the children need to\n\t\t\t\tbe direct descendents of the grid, and a11y takes a\n\t\t\t\thit. */\n\t\t\t\t\t<div className=\"controls\">\n\t\t\t\t\t\t<p className=\"legend\">Show:</p>\n\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t{nodeTypes.map((type, i) => (\n\t\t\t\t\t\t\t\t<Fragment key={type}>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\tname={`labs-types-${type}`}\n\t\t\t\t\t\t\t\t\t\tid={`labs-types-${type}`}\n\t\t\t\t\t\t\t\t\t\tvalue={type}\n\t\t\t\t\t\t\t\t\t\tchecked={typeStates[i]}\n\t\t\t\t\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\t\t\t\t\tconst {checked} = e.target;\n\t\t\t\t\t\t\t\t\t\t\tsetTypeStates(prevTypeStates => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst updatedTypeStates = [\n\t\t\t\t\t\t\t\t\t\t\t\t\t...prevTypeStates,\n\t\t\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t\t\t\tupdatedTypeStates[i] = checked;\n\t\t\t\t\t\t\t\t\t\t\t\treturn updatedTypeStates;\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<label htmlFor={`labs-types-${type}`}>\n\t\t\t\t\t\t\t\t\t\t{contentTypes[type].readableType}s\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"labs-clear labs-clear-types\"\n\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\tsetTypeStates(\n\t\t\t\t\t\t\t\t\tnew Array(nodeTypes.length).fill(false)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t✖\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<p className=\"legend\">Sort by:</p>\n\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t{sortingMethods.map(({title}, i) => (\n\t\t\t\t\t\t\t\t<Fragment key={title}>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\t\t\t\tname={`labs-sort-${title}`}\n\t\t\t\t\t\t\t\t\t\tid={`labs-sort-${title}`}\n\t\t\t\t\t\t\t\t\t\tvalue={title}\n\t\t\t\t\t\t\t\t\t\tchecked={sortIdx === i}\n\t\t\t\t\t\t\t\t\t\tonChange={() => setSortIdx(i)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<label htmlFor={`labs-sort-${title}`}>\n\t\t\t\t\t\t\t\t\t\t{title.toUpperCase().slice(0, 1) +\n\t\t\t\t\t\t\t\t\t\t\ttitle.slice(1)}\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<p className=\"legend\">Order:</p>\n\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\tname=\"labs-order\"\n\t\t\t\t\t\t\t\tid=\"labs-order\"\n\t\t\t\t\t\t\t\tvalue=\"ascending\"\n\t\t\t\t\t\t\t\tchecked={ascending}\n\t\t\t\t\t\t\t\tonChange={e => setAscending(e.target.checked)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<label htmlFor=\"labs-order\">Reverse</label>\n\t\t\t\t\t\t\t{/* TODO: Add the shuffle button back here!\n\n\t\t\t\t\t\t\t<button onClick={this.shuffleDisplayNodes}>\n\t\t\t\t\t\t\t\tShuffle\n\t\t\t\t\t\t\t</button> */}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<p className=\"result-details\">\n\t\t\t\tFound <strong>{nodes.length}</strong> entries from{' '}\n\t\t\t\t<strong>{nSources}</strong> source\n\t\t\t\t{nSources === 1 ? '' : 's'}:\n\t\t\t</p>\n\t\t\t<LazyGrid\n\t\t\t\tnodes={nodes}\n\t\t\t\tsetIsFullyLoaded={props.setIsFullyLoaded}\n\t\t\t/>\n\t\t</div>\n\t);\n});\n\n// TODO(riley): Ensure this lazy-loading works with a screen reader.\nconst LazyGrid = React.memo(({nodes, setIsFullyLoaded}) => {\n\tconst [renderLimit, setRenderLimit] = useState(20);\n\tconst [ref, inView, entry] = useInView();\n\n\t// TODO: The “or above” check doesn’t actually work…\n\t// If the last node is on or above the viewport, load the next 20 nodes.\n\t// Note that the “last” node might be higher up on the page, eg. if it has\n\t// a small footprint and squeezes into some top row masonry. Hence the on\n\t// *or above* the viewport check.\n\tuseEffect(() => {\n\t\tif (\n\t\t\t(inView || (entry?.boundingClientRect?.bottom ?? 1) <= 0) &&\n\t\t\trenderLimit < nodes.length\n\t\t) {\n\t\t\tsetRenderLimit(l => l + 20);\n\t\t}\n\t}, [inView, entry?.boundingClientRect?.bottom]);\n\n\tuseEffect(() => {\n\t\tsetRenderLimit(20);\n\t}, [nodes]);\n\n\tuseEffect(() => {\n\t\tsetIsFullyLoaded && setIsFullyLoaded(renderLimit >= nodes.length);\n\t}, [nodes.length, renderLimit]);\n\n\treturn (\n\t\t<ContentGrid masonry nodes={nodes.slice(0, renderLimit)} ref={ref} />\n\t);\n});\n\nconst ProjectExplorerWrapper = React.memo(props => {\n\tconst {\n\t\tallTagsJson: {nodes: tags},\n\t} = useStaticQuery(graphql`\n\t\t{\n\t\t\tallTagsJson {\n\t\t\t\tnodes {\n\t\t\t\t\tname\n\t\t\t\t\treadable\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`);\n\tconst allProjects = allProjectsQuery();\n\tconst nodes = useMemo(\n\t\t() =>\n\t\t\tallProjects.concat(\n\t\t\t\tgridDoodles.map(([Doodle, shouldRender], i) => ({\n\t\t\t\t\tuid: `DOODLE_${i}`,\n\t\t\t\t\ttype: 'doodle',\n\t\t\t\t\tDoodle,\n\t\t\t\t\tshouldRender,\n\t\t\t\t}))\n\t\t\t),\n\t\t[allProjects]\n\t);\n\n\treturn <ProjectExplorer nodes={nodes} tags={tags} {...props} />;\n});\n\nexport default ProjectExplorerWrapper;\n\n/* Big TODO: Once tags are established and applied to each content node (lots\n   of manual work required before that happens), get filtering by tag back into\n   the component. Here’s an old snippet:\n\n\t\tconst filtered = checkedTagNames.length\n\t\t\t? filteredByType.filter(node =>\n\t\t\t\t\tcheckedTagNames[\n\t\t\t\t\t\tstate.filterType === 'any' ? 'some' : 'every'\n\t\t\t\t\t](tagName => node.tags && node.tags.includes(tagName))\n\t\t\t  )\n\t\t\t: filteredByType;\n\n\t\t// …\n\t\t// …then for the render:\n\t\t// …\n\n\t\t<p className=\"legend\">Match:</p>\n\t\t<div className=\"inputs\">\n\t\t\t<input\n\t\t\t\ttype=\"radio\"\n\t\t\t\tname=\"labs-filter-any\"\n\t\t\t\tid=\"labs-filter-any\"\n\t\t\t\tvalue=\"any\"\n\t\t\t\tchecked={this.state.filterType === 'any'}\n\t\t\t\tonChange={this.handleFilterTypeChange}\n\t\t\t/>\n\t\t\t<label htmlFor=\"labs-filter-any\">Any</label>\n\t\t\t|\n\t\t\t<input\n\t\t\t\ttype=\"radio\"\n\t\t\t\tname=\"labs-filter-all\"\n\t\t\t\tid=\"labs-filter-all\"\n\t\t\t\tvalue=\"all\"\n\t\t\t\tchecked={this.state.filterType === 'all'}\n\t\t\t\tonChange={this.handleFilterTypeChange}\n\t\t\t/>\n\t\t\t<label htmlFor=\"labs-filter-all\">All</label>\n\t\t</div>\n\t\t<p className=\"legend\">Of:</p>\n\t\t<div className=\"inputs\">\n\t\t\t{tags.map((tag, i) => (\n\t\t\t\t<Fragment key={tag.name}>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tname={`labs-tags-${tag.name}`}\n\t\t\t\t\t\tid={`labs-tags-${tag.name}`}\n\t\t\t\t\t\tvalue={tag.name}\n\t\t\t\t\t\tchecked={this.state.tagStates[i]}\n\t\t\t\t\t\tonChange={e =>\n\t\t\t\t\t\t\tthis.handleTagStateChange(e, i)\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t<label\n\t\t\t\t\t\thtmlFor={`labs-tags-${tag.name}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t{tag.readable}\n\t\t\t\t\t</label>\n\t\t\t\t</Fragment>\n\t\t\t))}\n\t\t</div>\n\t\t<button\n\t\t\tclassName=\"labs-clear labs-clear-tags\"\n\t\t\tonClick={this.handleClearTagsClick}\n\t\t>\n\t\t\t✖\n\t\t</button>\n*/\n","import BigQuote from '../components/big-quote';\nimport GoUp from '../components/go-up';\nimport Layout from '../components/layout';\nimport PageHeader from '../components/page-header';\nimport ProjectExplorer from '../components/project-explorer';\nimport SEO from '../components/seo';\nimport React, {useState} from 'react';\n\nconst LabPage = ({location}) => {\n\tconst [isFullyLoaded, setIsFullyLoaded] = useState(false);\n\n\treturn (\n\t\t<Layout>\n\t\t\t<SEO title=\"Lab\" />\n\t\t\t<PageHeader fromPage={location?.state?.fromPage}>Lab</PageHeader>\n\t\t\t<ProjectExplorer setIsFullyLoaded={setIsFullyLoaded} />\n\t\t\t{isFullyLoaded && (\n\t\t\t\t<>\n\t\t\t\t\t<BigQuote quoteId=\"VOLTAIRE_BORING\" />\n\t\t\t\t\t<GoUp />\n\t\t\t\t</>\n\t\t\t)}\n\t\t</Layout>\n\t);\n};\n\nexport default LabPage;\n"],"sourceRoot":""}