{"version":3,"sources":["webpack:///./src/components/grid-doodles.js","webpack:///./src/components/project-explorer.js","webpack:///./src/pages/lab.js"],"names":["React","forwardRef","props","ref","El","className","split","map","letter","i","length","key","style","animationDelay","size","classPrefix","OuterElement","ms","month","Date","getMonth","today","getDate","Component","chance","fn","Math","random","ProjectExplorer","memo","useMemo","nodeTypes","Array","from","Set","nodes","n","type","sort","a","b","localeCompare","join","sortingMethods","version","useState","drawerOpen","setDrawerOpen","useStickyState","ascending","setAscending","sortIdx","setSortIdx","fill","typeStates","setTypeStates","nSources","reduce","sortFn","checkedTypeNames","filter","_","node","includes","partitions","push","doodles","sorted","ordered","reverse","doodle","shouldRender","forEach","splice","floor","onClick","openState","name","id","value","checked","onChange","e","target","prevTypeStates","updatedTypeStates","htmlFor","contentTypes","readableType","title","toUpperCase","slice","LazyGrid","setIsFullyLoaded","renderLimit","setRenderLimit","useInView","inView","entry","useEffect","boundingClientRect","bottom","l","masonry","ProjectExplorerWrapper","tags","useStaticQuery","allTagsJson","allProjects","allProjectsQuery","concat","gridDoodles","uid","Doodle","LabPage","location","isFullyLoaded","fromPage","state","quoteId"],"mappings":"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","file":"component---src-pages-lab-js-94877b1e7415b591d3d4.js","sourcesContent":["import CycleText from './cycle-text';\nimport BackgroundGenerator from './doodles/background-generator';\nimport CircleConstrainedLines from './doodles/circle-constrained-lines';\nimport './grid-doodles.css';\nimport TextGrid from './text-grid';\nimport React from 'react';\n\nexport default [\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<BackgroundGenerator El=\"li\" ref={ref} {...props} />\n\t\t)),\n\t\t0.8,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<CircleConstrainedLines El=\"li\" ref={ref} {...props} />\n\t\t)),\n\t\t1,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<li className=\"doodle wavytext\" ref={ref}>\n\t\t\t\t{'rileyjshaw'.split('').map((letter, i, {length}) => (\n\t\t\t\t\t<span\n\t\t\t\t\t\tkey={`wavytext-${i}`}\n\t\t\t\t\t\tstyle={{animationDelay: `${(i - length) * 0.2}s`}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{letter}\n\t\t\t\t\t</span>\n\t\t\t\t))}\n\t\t\t</li>\n\t\t)),\n\t\t0.2,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<TextGrid\n\t\t\t\tsize={[3, 3]}\n\t\t\t\tclassPrefix=\"doingreat\"\n\t\t\t\tclassName=\"content-node doodle\"\n\t\t\t\tOuterElement=\"li\"\n\t\t\t\t{...props}\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\tDOINGREAT\n\t\t\t</TextGrid>\n\t\t)),\n\t\t0.1,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<CycleText\n\t\t\t\tclassPrefix=\"wavebump\"\n\t\t\t\tclassName=\"content-node doodle\"\n\t\t\t\tms={50}\n\t\t\t\tOuterElement=\"li\"\n\t\t\t\t{...props}\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\t▁▂▃▅▆▇▇▆▅▃▂▁\n\t\t\t</CycleText>\n\t\t)),\n\t\t0.3,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<CycleText\n\t\t\t\tclassPrefix=\"droplet\"\n\t\t\t\tclassName=\"content-node doodle\"\n\t\t\t\tms={150}\n\t\t\t\tOuterElement=\"li\"\n\t\t\t\t{...props}\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\t⊙⊚⦾⊛\n\t\t\t</CycleText>\n\t\t)),\n\t\t0.2,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<CycleText\n\t\t\t\tclassPrefix=\"circles\"\n\t\t\t\tclassName=\"content-node doodle\"\n\t\t\t\tms={100}\n\t\t\t\tsize={[2, 2]}\n\t\t\t\tOuterElement=\"li\"\n\t\t\t\t{...props}\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\t◯⦿◉◎\n\t\t\t</CycleText>\n\t\t)),\n\t\t0.2,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<li className=\"content-node snowman doodle\" {...props} ref={ref}>\n\t\t\t\t☃\n\t\t\t</li>\n\t\t)),\n\t\t0.3,\n\t\t() => {\n\t\t\tconst month = new Date().getMonth();\n\t\t\treturn month < 4 || month === 11;\n\t\t},\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<CycleText\n\t\t\t\tclassPrefix=\"wavebump\"\n\t\t\t\tclassName=\"content-node tall doodle\"\n\t\t\t\tms={400}\n\t\t\t\tOuterElement=\"li\"\n\t\t\t\t{...props}\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\tSecret message!\n\t\t\t</CycleText>\n\t\t)),\n\t\t0.05,\n\t\t() => {\n\t\t\tconst today = new Date();\n\t\t\treturn today.getMonth() === 11 && today.getDate() === 25;\n\t\t},\n\t],\n].map(([Component, chance, fn]) => [\n\tComponent,\n\tfn ? () => fn() || Math.random() < chance : () => Math.random() < chance,\n]);\n","// TODO(RILEY): https://tympanus.net/Development/TiltHoverEffects/index.html\nimport allProjectsQuery from '../util/all-projects-query';\nimport contentTypes from '../util/content-types';\nimport {useInView, useStickyState} from '../util/hooks';\nimport sortingMethods, {shuffle} from '../util/sorting-methods';\nimport ContentGrid from './content-grid';\nimport gridDoodles from './grid-doodles';\nimport './project-explorer.css';\nimport {useStaticQuery, graphql} from 'gatsby';\nimport React, {Fragment, useState, useEffect, useMemo} from 'react';\n\nconst ProjectExplorer = React.memo(props => {\n\tconst [nodeTypes, version] = useMemo(() => {\n\t\tconst nodeTypes = Array.from(\n\t\t\tnew Set(props.nodes.map(n => n.type))\n\t\t).sort((a, b) => a.localeCompare(b));\n\t\treturn [nodeTypes, `${nodeTypes.join('')}${sortingMethods.length}`];\n\t}, [props.nodes]);\n\n\tconst [drawerOpen, setDrawerOpen] = useState(false);\n\tconst [ascending, setAscending] = useStickyState(\n\t\tfalse,\n\t\t'LAB_V2_ascending',\n\t\t{version}\n\t);\n\tconst [sortIdx, setSortIdx] = useStickyState(0, 'LAB_V2_sortIdx', {\n\t\tversion,\n\t});\n\tconst [typeStates, setTypeStates] = useStickyState(\n\t\t() => Array.from(nodeTypes).fill(true),\n\t\t'LAB_V2_typeStates',\n\t\t{version}\n\t);\n\n\tconst nSources = typeStates.reduce((a, b) => a + b) || typeStates.length;\n\n\tconst nodes = useMemo(() => {\n\t\tconst {sortFn} = sortingMethods[sortIdx];\n\t\tconst checkedTypeNames = nodeTypes.filter((_, i) => typeStates[i]);\n\t\tconst [doodles, filtered] = (checkedTypeNames.length\n\t\t\t? props.nodes.filter(node => checkedTypeNames.includes(node.type))\n\t\t\t: props.nodes\n\t\t).reduce(\n\t\t\t(partitions, node) => {\n\t\t\t\tpartitions[node.type === 'doodle' ? 0 : 1].push(node);\n\t\t\t\treturn partitions;\n\t\t\t},\n\t\t\t[[], []]\n\t\t);\n\t\tconst sorted = sortFn(filtered);\n\t\tconst ordered = ascending ? sorted.reverse() : sorted;\n\t\t// Insert a few doodles into a random position.\n\t\tdoodles\n\t\t\t.filter(doodle => doodle.shouldRender())\n\t\t\t.forEach(doodle => {\n\t\t\t\tordered.splice(\n\t\t\t\t\tMath.floor(Math.random() * ordered.length),\n\t\t\t\t\t0,\n\t\t\t\t\tdoodle\n\t\t\t\t);\n\t\t\t});\n\t\treturn ordered;\n\t}, [ascending, sortIdx, typeStates, props.nodes]);\n\n\treturn (\n\t\t<div className=\"project-explorer\">\n\t\t\t<button\n\t\t\t\tclassName=\"project-explorer-hide-filters\"\n\t\t\t\tonClick={() => setDrawerOpen(openState => !openState)}\n\t\t\t>\n\t\t\t\t{drawerOpen ? 'Hide filters ▲' : 'Show filters ▼'}\n\t\t\t</button>\n\t\t\t<div className=\"filters\">\n\t\t\t\t{drawerOpen && (\n\t\t\t\t\t/* TODO(riley): Once display: contents or display:\n\t\t\t\tsubgrid have good support, replace <p.legend> with\n\t\t\t\t<legend>, get rid of the .inputs wrappers, and nest\n\t\t\t\t<fieldset>s (display: contents) around each <legend> /\n\t\t\t\t.inputs / button set. Until then, the children need to\n\t\t\t\tbe direct descendents of the grid, and a11y takes a\n\t\t\t\thit. */\n\t\t\t\t\t<div className=\"controls\">\n\t\t\t\t\t\t<p className=\"legend\">Show:</p>\n\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t{nodeTypes.map((type, i) => (\n\t\t\t\t\t\t\t\t<Fragment key={type}>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\tname={`labs-types-${type}`}\n\t\t\t\t\t\t\t\t\t\tid={`labs-types-${type}`}\n\t\t\t\t\t\t\t\t\t\tvalue={type}\n\t\t\t\t\t\t\t\t\t\tchecked={typeStates[i]}\n\t\t\t\t\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\t\t\t\t\tconst {checked} = e.target;\n\t\t\t\t\t\t\t\t\t\t\tsetTypeStates(prevTypeStates => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst updatedTypeStates = [\n\t\t\t\t\t\t\t\t\t\t\t\t\t...prevTypeStates,\n\t\t\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t\t\t\tupdatedTypeStates[i] = checked;\n\t\t\t\t\t\t\t\t\t\t\t\treturn updatedTypeStates;\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<label htmlFor={`labs-types-${type}`}>\n\t\t\t\t\t\t\t\t\t\t{contentTypes[type].readableType}s\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"labs-clear labs-clear-types\"\n\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\tsetTypeStates(\n\t\t\t\t\t\t\t\t\tnew Array(nodeTypes.length).fill(false)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t✖\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<p className=\"legend\">Sort by:</p>\n\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t{sortingMethods.map(({title}, i) => (\n\t\t\t\t\t\t\t\t<Fragment key={title}>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\t\t\t\tname={`labs-sort-${title}`}\n\t\t\t\t\t\t\t\t\t\tid={`labs-sort-${title}`}\n\t\t\t\t\t\t\t\t\t\tvalue={title}\n\t\t\t\t\t\t\t\t\t\tchecked={sortIdx === i}\n\t\t\t\t\t\t\t\t\t\tonChange={() => setSortIdx(i)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<label htmlFor={`labs-sort-${title}`}>\n\t\t\t\t\t\t\t\t\t\t{title.toUpperCase().slice(0, 1) +\n\t\t\t\t\t\t\t\t\t\t\ttitle.slice(1)}\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<p className=\"legend\">Order:</p>\n\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\tname=\"labs-order\"\n\t\t\t\t\t\t\t\tid=\"labs-order\"\n\t\t\t\t\t\t\t\tvalue=\"ascending\"\n\t\t\t\t\t\t\t\tchecked={ascending}\n\t\t\t\t\t\t\t\tonChange={e => setAscending(e.target.checked)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<label htmlFor=\"labs-order\">Reverse</label>\n\t\t\t\t\t\t\t{/* TODO: Add the shuffle button back here!\n\n\t\t\t\t\t\t\t<button onClick={this.shuffleDisplayNodes}>\n\t\t\t\t\t\t\t\tShuffle\n\t\t\t\t\t\t\t</button> */}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<p className=\"result-details\">\n\t\t\t\tFound <strong>{nodes.length}</strong> entries from{' '}\n\t\t\t\t<strong>{nSources}</strong> source\n\t\t\t\t{nSources === 1 ? '' : 's'}:\n\t\t\t</p>\n\t\t\t<LazyGrid\n\t\t\t\tnodes={nodes}\n\t\t\t\tsetIsFullyLoaded={props.setIsFullyLoaded}\n\t\t\t/>\n\t\t</div>\n\t);\n});\n\n// TODO(riley): Ensure this lazy-loading works with a screen reader.\nconst LazyGrid = React.memo(({nodes, setIsFullyLoaded}) => {\n\tconst [renderLimit, setRenderLimit] = useState(20);\n\tconst [ref, inView, entry] = useInView();\n\n\t// TODO: The “or above” check doesn’t actually work…\n\t// If the last node is on or above the viewport, load the next 20 nodes.\n\t// Note that the “last” node might be higher up on the page, eg. if it has\n\t// a small footprint and squeezes into some top row masonry. Hence the on\n\t// *or above* the viewport check.\n\tuseEffect(() => {\n\t\tif (\n\t\t\t(inView || (entry?.boundingClientRect?.bottom ?? 1) <= 0) &&\n\t\t\trenderLimit < nodes.length\n\t\t) {\n\t\t\tsetRenderLimit(l => l + 20);\n\t\t}\n\t}, [inView, entry?.boundingClientRect?.bottom]);\n\n\tuseEffect(() => {\n\t\tsetRenderLimit(20);\n\t}, [nodes]);\n\n\tuseEffect(() => {\n\t\tsetIsFullyLoaded && setIsFullyLoaded(renderLimit >= nodes.length);\n\t}, [nodes.length, renderLimit]);\n\n\treturn (\n\t\t<ContentGrid masonry nodes={nodes.slice(0, renderLimit)} ref={ref} />\n\t);\n});\n\nconst ProjectExplorerWrapper = React.memo(props => {\n\tconst {\n\t\tallTagsJson: {nodes: tags},\n\t} = useStaticQuery(graphql`\n\t\t{\n\t\t\tallTagsJson {\n\t\t\t\tnodes {\n\t\t\t\t\tname\n\t\t\t\t\treadable\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`);\n\tconst allProjects = allProjectsQuery();\n\tconst nodes = useMemo(\n\t\t() =>\n\t\t\tallProjects.concat(\n\t\t\t\tgridDoodles.map(([Doodle, shouldRender], i) => ({\n\t\t\t\t\tuid: `DOODLE_${i}`,\n\t\t\t\t\ttype: 'doodle',\n\t\t\t\t\tDoodle,\n\t\t\t\t\tshouldRender,\n\t\t\t\t}))\n\t\t\t),\n\t\t[allProjects]\n\t);\n\n\treturn <ProjectExplorer nodes={nodes} tags={tags} {...props} />;\n});\n\nexport default ProjectExplorerWrapper;\n\n/* Big TODO: Once tags are established and applied to each content node (lots\n   of manual work required before that happens), get filtering by tag back into\n   the component. Here’s an old snippet:\n\n\t\tconst filtered = checkedTagNames.length\n\t\t\t? filteredByType.filter(node =>\n\t\t\t\t\tcheckedTagNames[\n\t\t\t\t\t\tstate.filterType === 'any' ? 'some' : 'every'\n\t\t\t\t\t](tagName => node.tags && node.tags.includes(tagName))\n\t\t\t  )\n\t\t\t: filteredByType;\n\n\t\t// …\n\t\t// …then for the render:\n\t\t// …\n\n\t\t<p className=\"legend\">Match:</p>\n\t\t<div className=\"inputs\">\n\t\t\t<input\n\t\t\t\ttype=\"radio\"\n\t\t\t\tname=\"labs-filter-any\"\n\t\t\t\tid=\"labs-filter-any\"\n\t\t\t\tvalue=\"any\"\n\t\t\t\tchecked={this.state.filterType === 'any'}\n\t\t\t\tonChange={this.handleFilterTypeChange}\n\t\t\t/>\n\t\t\t<label htmlFor=\"labs-filter-any\">Any</label>\n\t\t\t|\n\t\t\t<input\n\t\t\t\ttype=\"radio\"\n\t\t\t\tname=\"labs-filter-all\"\n\t\t\t\tid=\"labs-filter-all\"\n\t\t\t\tvalue=\"all\"\n\t\t\t\tchecked={this.state.filterType === 'all'}\n\t\t\t\tonChange={this.handleFilterTypeChange}\n\t\t\t/>\n\t\t\t<label htmlFor=\"labs-filter-all\">All</label>\n\t\t</div>\n\t\t<p className=\"legend\">Of:</p>\n\t\t<div className=\"inputs\">\n\t\t\t{tags.map((tag, i) => (\n\t\t\t\t<Fragment key={tag.name}>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tname={`labs-tags-${tag.name}`}\n\t\t\t\t\t\tid={`labs-tags-${tag.name}`}\n\t\t\t\t\t\tvalue={tag.name}\n\t\t\t\t\t\tchecked={this.state.tagStates[i]}\n\t\t\t\t\t\tonChange={e =>\n\t\t\t\t\t\t\tthis.handleTagStateChange(e, i)\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t<label\n\t\t\t\t\t\thtmlFor={`labs-tags-${tag.name}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t{tag.readable}\n\t\t\t\t\t</label>\n\t\t\t\t</Fragment>\n\t\t\t))}\n\t\t</div>\n\t\t<button\n\t\t\tclassName=\"labs-clear labs-clear-tags\"\n\t\t\tonClick={this.handleClearTagsClick}\n\t\t>\n\t\t\t✖\n\t\t</button>\n*/\n","import BigQuote from '../components/big-quote';\nimport GoUp from '../components/go-up';\nimport Layout from '../components/layout';\nimport PageHeader from '../components/page-header';\nimport ProjectExplorer from '../components/project-explorer';\nimport SEO from '../components/seo';\nimport React, {useState} from 'react';\n\nconst LabPage = ({location}) => {\n\tconst [isFullyLoaded, setIsFullyLoaded] = useState(false);\n\n\treturn (\n\t\t<Layout>\n\t\t\t<SEO title=\"Lab\" />\n\t\t\t<PageHeader fromPage={location?.state?.fromPage}>Lab</PageHeader>\n\t\t\t<ProjectExplorer setIsFullyLoaded={setIsFullyLoaded} />\n\t\t\t{isFullyLoaded && (\n\t\t\t\t<>\n\t\t\t\t\t<BigQuote quoteId=\"VOLTAIRE_BORING\" />\n\t\t\t\t\t<GoUp />\n\t\t\t\t</>\n\t\t\t)}\n\t\t</Layout>\n\t);\n};\n\nexport default LabPage;\n"],"sourceRoot":""}