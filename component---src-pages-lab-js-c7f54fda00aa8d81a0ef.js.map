{"version":3,"sources":["webpack:///./src/components/grid-doodles.js","webpack:///./src/components/project-explorer.js","webpack:///./src/pages/lab.js"],"names":["React","forwardRef","props","ref","size","classPrefix","className","OuterElement","ms","ProjectExplorer","getNodeTypes","state","nodeTypes","refreshDisplayNodes","setState","nodes","getDisplayNodes","shuffleDisplayNodes","shuffle","handleSortMethodChange","sortIdx","handleFilterTypeChange","e","filterType","target","value","handleTypeStateChange","typeIdx","checked","typeStates","updatedTypeStates","handleClearTypesClick","Array","length","fill","handleTagStateChange","tagIdx","tagStates","updatedTagStates","handleClearTagsClick","tags","handleAscendingChange","ascending","from","Set","map","n","type","filter","initialState","drawerOpen","sortFn","sortingMethods","checkedTypeNames","this","_","i","checkedTagNames","tag","name","node","includes","reduce","partitions","push","doodles","filteredByType","sorted","tagName","ordered","reverse","forEach","doodle","Math","random","splice","floor","render","onClick","key","id","onChange","htmlFor","contentTypes","readableType","title","toUpperCase","slice","a","b","LazyGrid","setIsFullyLoaded","PureComponent","useState","renderLimit","setRenderLimit","useInView","inView","entry","useEffect","boundingClientRect","bottom","l","useStaticQuery","allTagsJson","allProjectsQuery","concat","gridDoodles","Doodle","uid","LabPage","location","isFullyLoaded","fromPage","quoteId"],"mappings":"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","file":"component---src-pages-lab-js-c7f54fda00aa8d81a0ef.js","sourcesContent":["import React from 'react';\n\nimport TextGrid from './text-grid';\nimport CycleText from './cycle-text';\n\nimport './grid-doodles.css';\n\nexport default [\n\tReact.forwardRef((props, ref) => (\n\t\t<TextGrid\n\t\t\tsize={[3, 3]}\n\t\t\tclassPrefix=\"doingreat\"\n\t\t\tclassName=\"content-node doodle\"\n\t\t\tOuterElement=\"li\"\n\t\t\t{...props}\n\t\t\tref={ref}\n\t\t>\n\t\t\tDOINGREAT\n\t\t</TextGrid>\n\t)),\n\tReact.forwardRef((props, ref) => (\n\t\t<CycleText\n\t\t\tclassPrefix=\"wavebump\"\n\t\t\tclassName=\"content-node doodle\"\n\t\t\tms={50}\n\t\t\tOuterElement=\"li\"\n\t\t\t{...props}\n\t\t\tref={ref}\n\t\t>\n\t\t\t▁▂▃▅▆▇▇▆▅▃▂▁\n\t\t</CycleText>\n\t)),\n\tReact.forwardRef((props, ref) => (\n\t\t<CycleText\n\t\t\tclassPrefix=\"droplet\"\n\t\t\tclassName=\"content-node doodle\"\n\t\t\tms={150}\n\t\t\tOuterElement=\"li\"\n\t\t\t{...props}\n\t\t\tref={ref}\n\t\t>\n\t\t\t⊙⊚⦾⊛\n\t\t</CycleText>\n\t)),\n\tReact.forwardRef((props, ref) => (\n\t\t<CycleText\n\t\t\tclassPrefix=\"circles\"\n\t\t\tclassName=\"content-node doodle\"\n\t\t\tms={100}\n\t\t\tsize={[2, 2]}\n\t\t\tOuterElement=\"li\"\n\t\t\t{...props}\n\t\t\tref={ref}\n\t\t>\n\t\t\t◯⦿◉◎\n\t\t</CycleText>\n\t)),\n\tReact.forwardRef((props, ref) => (\n\t\t<li className=\"content-node snowman doodle\" {...props} ref={ref}>\n\t\t\t☃\n\t\t</li>\n\t)),\n\tReact.forwardRef((props, ref) => (\n\t\t<CycleText\n\t\t\tclassPrefix=\"wavebump\"\n\t\t\tclassName=\"content-node tall doodle\"\n\t\t\tms={400}\n\t\t\tOuterElement=\"li\"\n\t\t\t{...props}\n\t\t\tref={ref}\n\t\t>\n\t\t\tGrEeTiNgShUmAn\n\t\t</CycleText>\n\t)),\n];\n","// TODO(RILEY): https://tympanus.net/Development/TiltHoverEffects/index.html\nimport React, {Fragment, useState, useEffect} from 'react';\nimport {useStaticQuery, graphql} from 'gatsby';\n\nimport sortingMethods, {shuffle} from '../util/sorting-methods';\nimport allProjectsQuery from '../util/all-projects-query';\nimport contentTypes from '../util/content-types';\nimport {useInView} from '../util/hooks';\n\nimport gridDoodles from './grid-doodles';\nimport ContentGrid from './content-grid';\n\nimport './project-explorer.css';\n\nclass ProjectExplorer extends React.PureComponent {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tconst nodeTypes = Array.from(\n\t\t\tnew Set(this.props.nodes.map(n => n.type))\n\t\t).filter(type => type !== 'doodle');\n\t\tconst initialState = {\n\t\t\tnodeTypes,\n\t\t\ttypeStates: Array.from(nodeTypes).fill(true),\n\t\t\tsortIdx: 0,\n\t\t\tascending: false,\n\t\t\tfilterType: 'any',\n\t\t\ttagStates: Array.from(props.tags).fill(false),\n\t\t\tdrawerOpen: false,\n\t\t};\n\n\t\tthis.state = {\n\t\t\t...initialState,\n\t\t\tnodes: this.getDisplayNodes(initialState, props),\n\t\t};\n\t}\n\n\t// HACK(riley): Better to not use state and memoize this on `props.nodes`.\n\tgetNodeTypes = (state = this.state) => state.nodeTypes;\n\n\tgetDisplayNodes(state, {tags, nodes}) {\n\t\tconst {sortFn} = sortingMethods[state.sortIdx];\n\t\tconst checkedTypeNames = this.getNodeTypes(state).filter(\n\t\t\t(_, i) => state.typeStates[i]\n\t\t);\n\t\tconst checkedTagNames = tags\n\t\t\t.filter((_, i) => state.tagStates[i])\n\t\t\t.map(tag => tag.name);\n\t\tconst [doodles, filteredByType] = (checkedTypeNames.length\n\t\t\t? nodes.filter(\n\t\t\t\t\tnode =>\n\t\t\t\t\t\tnode.type === 'doodle' ||\n\t\t\t\t\t\tcheckedTypeNames.includes(node.type)\n\t\t\t  )\n\t\t\t: nodes\n\t\t).reduce(\n\t\t\t(partitions, node) => {\n\t\t\t\tpartitions[node.type === 'doodle' ? 0 : 1].push(node);\n\t\t\t\treturn partitions;\n\t\t\t},\n\t\t\t[[], []]\n\t\t);\n\t\tconst filtered = checkedTagNames.length\n\t\t\t? filteredByType.filter(node =>\n\t\t\t\t\tcheckedTagNames[\n\t\t\t\t\t\tstate.filterType === 'any' ? 'some' : 'every'\n\t\t\t\t\t](tagName => node.tags && node.tags.includes(tagName))\n\t\t\t  )\n\t\t\t: filteredByType;\n\t\tconst sorted = sortFn(filtered);\n\t\tconst ordered = state.ascending ? sorted.reverse() : sorted;\n\t\t// Insert a few doodles into a random position.\n\t\tdoodles.forEach(doodle => {\n\t\t\tif (Math.random() < 0.3) {\n\t\t\t\tordered.splice(\n\t\t\t\t\tMath.floor(Math.random() * ordered.length),\n\t\t\t\t\t0,\n\t\t\t\t\tdoodle\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t\treturn ordered;\n\t}\n\n\trefreshDisplayNodes = () => {\n\t\tthis.setState((state, props) => ({\n\t\t\tnodes: this.getDisplayNodes(state, props),\n\t\t}));\n\t};\n\n\tshuffleDisplayNodes = () => {\n\t\tthis.setState(({nodes}) => {\n\t\t\treturn {nodes: shuffle(nodes)};\n\t\t});\n\t};\n\n\thandleSortMethodChange = sortIdx => {\n\t\tthis.setState({sortIdx}, this.refreshDisplayNodes);\n\t};\n\n\thandleFilterTypeChange = e => {\n\t\tthis.setState({filterType: e.target.value}, this.refreshDisplayNodes);\n\t};\n\n\thandleTypeStateChange = (e, typeIdx) => {\n\t\tconst {checked} = e.target;\n\t\tthis.setState(({typeStates}) => {\n\t\t\tconst updatedTypeStates = [...typeStates];\n\t\t\tupdatedTypeStates[typeIdx] = checked;\n\t\t\treturn {typeStates: updatedTypeStates};\n\t\t}, this.refreshDisplayNodes);\n\t};\n\n\thandleClearTypesClick = () => {\n\t\tthis.setState(\n\t\t\t{typeStates: new Array(this.getNodeTypes().length).fill(false)},\n\t\t\tthis.refreshDisplayNodes\n\t\t);\n\t};\n\n\thandleTagStateChange = (e, tagIdx) => {\n\t\tconst {checked} = e.target;\n\t\tthis.setState(({tagStates}) => {\n\t\t\tconst updatedTagStates = [...tagStates];\n\t\t\tupdatedTagStates[tagIdx] = checked;\n\t\t\treturn {tagStates: updatedTagStates};\n\t\t}, this.refreshDisplayNodes);\n\t};\n\n\thandleClearTagsClick = () => {\n\t\tthis.setState(\n\t\t\t{tagStates: new Array(this.props.tags.length).fill(false)},\n\t\t\tthis.refreshDisplayNodes\n\t\t);\n\t};\n\n\thandleAscendingChange = e => {\n\t\tthis.setState({ascending: e.target.checked}, this.refreshDisplayNodes);\n\t};\n\n\trender() {\n\t\t// const {tags} = this.props;\n\t\tconst {nodes} = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"project-explorer\">\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"project-explorer-hide-filters\"\n\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\tthis.setState(({drawerOpen}) => ({\n\t\t\t\t\t\t\tdrawerOpen: !drawerOpen,\n\t\t\t\t\t\t}))\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\t{this.state.drawerOpen\n\t\t\t\t\t\t? 'Hide filters ▲'\n\t\t\t\t\t\t: 'Show filters ▼'}\n\t\t\t\t</button>\n\t\t\t\t<div className=\"filters\">\n\t\t\t\t\t{this.state.drawerOpen && (\n\t\t\t\t\t\t/* TODO(riley): Once display: contents or display:\n\t\t\t\t\t\tsubgrid have good support, replace <p.legend> with\n\t\t\t\t\t\t<legend>, get rid of the .inputs wrappers, and nest\n\t\t\t\t\t\t<fieldset>s (display: contents) around each <legend> /\n\t\t\t\t\t\t.inputs / button set. Until then, the children need to\n\t\t\t\t\t\tbe direct descendents of the grid, and a11y takes a\n\t\t\t\t\t\thit. */\n\t\t\t\t\t\t<div className=\"controls\">\n\t\t\t\t\t\t\t<p className=\"legend\">Show:</p>\n\t\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t\t{this.getNodeTypes().map((type, i) => (\n\t\t\t\t\t\t\t\t\t<Fragment key={type}>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tname={`labs-types-${type}`}\n\t\t\t\t\t\t\t\t\t\t\tid={`labs-types-${type}`}\n\t\t\t\t\t\t\t\t\t\t\tvalue={type}\n\t\t\t\t\t\t\t\t\t\t\tchecked={this.state.typeStates[i]}\n\t\t\t\t\t\t\t\t\t\t\tonChange={e =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.handleTypeStateChange(\n\t\t\t\t\t\t\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\t\t\t\t\t\t\ti\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<label htmlFor={`labs-types-${type}`}>\n\t\t\t\t\t\t\t\t\t\t\t{contentTypes[type].readableType}s\n\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"labs-clear labs-clear-types\"\n\t\t\t\t\t\t\t\tonClick={this.handleClearTypesClick}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tX\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<p className=\"legend\">Sort by:</p>\n\t\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t\t{sortingMethods.map(({title}, i) => (\n\t\t\t\t\t\t\t\t\t<Fragment key={title}>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\t\t\t\t\tname={`labs-sort-${title}`}\n\t\t\t\t\t\t\t\t\t\t\tid={`labs-sort-${title}`}\n\t\t\t\t\t\t\t\t\t\t\tvalue={title}\n\t\t\t\t\t\t\t\t\t\t\tchecked={this.state.sortIdx === i}\n\t\t\t\t\t\t\t\t\t\t\tonChange={() =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.handleSortMethodChange(i)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<label htmlFor={`labs-sort-${title}`}>\n\t\t\t\t\t\t\t\t\t\t\t{title.toUpperCase().slice(0, 1) +\n\t\t\t\t\t\t\t\t\t\t\t\ttitle.slice(1)}\n\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<p className=\"legend\">Order:</p>\n\t\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\tname=\"labs-order\"\n\t\t\t\t\t\t\t\t\tid=\"labs-order\"\n\t\t\t\t\t\t\t\t\tvalue=\"ascending\"\n\t\t\t\t\t\t\t\t\tchecked={this.state.ascending}\n\t\t\t\t\t\t\t\t\tonChange={this.handleAscendingChange}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<label htmlFor=\"labs-order\">Reverse</label>\n\t\t\t\t\t\t\t\t<button onClick={this.shuffleDisplayNodes}>\n\t\t\t\t\t\t\t\t\tShuffle\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{/* <p className=\"legend\">Match:</p>\n\t\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\t\t\tname=\"labs-filter-any\"\n\t\t\t\t\t\t\t\t\tid=\"labs-filter-any\"\n\t\t\t\t\t\t\t\t\tvalue=\"any\"\n\t\t\t\t\t\t\t\t\tchecked={this.state.filterType === 'any'}\n\t\t\t\t\t\t\t\t\tonChange={this.handleFilterTypeChange}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<label htmlFor=\"labs-filter-any\">Any</label>\n\t\t\t\t\t\t\t\t|\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\t\t\tname=\"labs-filter-all\"\n\t\t\t\t\t\t\t\t\tid=\"labs-filter-all\"\n\t\t\t\t\t\t\t\t\tvalue=\"all\"\n\t\t\t\t\t\t\t\t\tchecked={this.state.filterType === 'all'}\n\t\t\t\t\t\t\t\t\tonChange={this.handleFilterTypeChange}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<label htmlFor=\"labs-filter-all\">All</label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<p className=\"legend\">Of:</p>\n\t\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t\t{tags.map((tag, i) => (\n\t\t\t\t\t\t\t\t\t<Fragment key={tag.name}>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tname={`labs-tags-${tag.name}`}\n\t\t\t\t\t\t\t\t\t\t\tid={`labs-tags-${tag.name}`}\n\t\t\t\t\t\t\t\t\t\t\tvalue={tag.name}\n\t\t\t\t\t\t\t\t\t\t\tchecked={this.state.tagStates[i]}\n\t\t\t\t\t\t\t\t\t\t\tonChange={e =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.handleTagStateChange(e, i)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<label\n\t\t\t\t\t\t\t\t\t\t\thtmlFor={`labs-tags-${tag.name}`}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{tag.readable}\n\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"labs-clear labs-clear-tags\"\n\t\t\t\t\t\t\t\tonClick={this.handleClearTagsClick}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tX\n\t\t\t\t\t\t\t</button> */}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t<p className=\"result-details\">\n\t\t\t\t\tFound{' '}\n\t\t\t\t\t<strong>\n\t\t\t\t\t\t{nodes.filter(node => node.type !== 'doodle').length}\n\t\t\t\t\t</strong>{' '}\n\t\t\t\t\tentries from{' '}\n\t\t\t\t\t<strong>\n\t\t\t\t\t\t{this.state.typeStates.reduce((a, b) => a + b) ||\n\t\t\t\t\t\t\tthis.state.typeStates.length}\n\t\t\t\t\t</strong>{' '}\n\t\t\t\t\tsources:\n\t\t\t\t</p>\n\t\t\t\t<LazyGrid\n\t\t\t\t\tnodes={nodes}\n\t\t\t\t\tsetIsFullyLoaded={this.props.setIsFullyLoaded}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// TODO(riley): Ensure this lazy-loading works with a screen reader.\nfunction LazyGrid({nodes, setIsFullyLoaded}) {\n\tconst [renderLimit, setRenderLimit] = useState(20);\n\tconst [ref, inView, entry] = useInView();\n\t// If the last node is on or above the viewport, load the next 20 nodes.\n\t// Note that the “last” node might be higher up on the page, eg. if it has\n\t// a small footprint and squeezes into some top row masonry. Hence the on\n\t// *or above* the viewport check.\n\tuseEffect(() => {\n\t\tif (\n\t\t\t(inView || (entry?.boundingClientRect?.bottom ?? 1) <= 0) &&\n\t\t\trenderLimit < nodes.length\n\t\t) {\n\t\t\tsetRenderLimit(l => l + 20);\n\t\t}\n\t}, [inView, entry?.boundingClientRect?.bottom]);\n\tuseEffect(() => {\n\t\tsetRenderLimit(20);\n\t}, [nodes.length]);\n\tuseEffect(() => {\n\t\tsetIsFullyLoaded && setIsFullyLoaded(renderLimit >= nodes.length);\n\t}, [nodes.length, renderLimit]);\n\n\treturn <ContentGrid nodes={nodes.slice(0, renderLimit)} ref={ref} />;\n}\n\nexport default props => {\n\tconst {\n\t\tallTagsJson: {nodes: tags},\n\t} = useStaticQuery(graphql`\n\t\t{\n\t\t\tallTagsJson {\n\t\t\t\tnodes {\n\t\t\t\t\tname\n\t\t\t\t\treadable\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`);\n\n\tconst nodes = allProjectsQuery().concat(\n\t\tgridDoodles.map((Doodle, i) => ({\n\t\t\tuid: `DOODLE_${i}`,\n\t\t\ttype: 'doodle',\n\t\t\tDoodle,\n\t\t}))\n\t);\n\n\treturn <ProjectExplorer nodes={nodes} tags={tags} {...props} />;\n};\n","import React, {useState} from 'react';\n\nimport BigQuote from '../components/big-quote';\nimport GoUp from '../components/go-up';\nimport Layout from '../components/layout';\nimport PageHeader from '../components/page-header';\nimport ProjectExplorer from '../components/project-explorer';\nimport SEO from '../components/seo';\n\nconst LabPage = ({location}) => {\n\tconst [isFullyLoaded, setIsFullyLoaded] = useState(false);\n\n\treturn (\n\t\t<Layout>\n\t\t\t<SEO title=\"Lab\" />\n\t\t\t<PageHeader fromPage={location?.state?.fromPage}>Lab</PageHeader>\n\t\t\t<ProjectExplorer setIsFullyLoaded={setIsFullyLoaded} />\n\t\t\t{isFullyLoaded && (\n\t\t\t\t<>\n\t\t\t\t\t<BigQuote quoteId=\"VOLTAIRE_BORING\" />\n\t\t\t\t\t<GoUp />\n\t\t\t\t</>\n\t\t\t)}\n\t\t</Layout>\n\t);\n};\n\nexport default LabPage;\n"],"sourceRoot":""}