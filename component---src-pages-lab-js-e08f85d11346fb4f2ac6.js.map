{"version":3,"sources":["webpack:///./src/components/grid-doodles.js","webpack:///./src/components/project-explorer.js","webpack:///./src/pages/lab.js"],"names":["size","classPrefix","className","OuterElement","ms","ProjectExplorer","props","getNodeTypes","state","nodeTypes","refreshDisplayNodes","setState","nodes","getDisplayNodes","shuffleDisplayNodes","shuffle","handleSortMethodChange","sortIdx","handleFilterTypeChange","e","filterType","target","value","handleTypeStateChange","typeIdx","checked","typeStates","updatedTypeStates","handleClearTypesClick","Array","length","fill","handleTagStateChange","tagIdx","tagStates","updatedTagStates","handleClearTagsClick","tags","handleAscendingChange","ascending","from","Set","map","n","type","initialState","drawerOpen","sortFn","sortingMethods","checkedTypeNames","this","filter","_","i","checkedTagNames","tag","name","node","some","reduce","partitions","push","doodles","filteredByType","sorted","tagName","includes","ordered","reverse","forEach","doodle","splice","Math","floor","random","render","to","onClick","key","id","onChange","htmlFor","contentTypes","readableType","title","toUpperCase","slice","a","b","React","PureComponent","useStaticQuery","allTagsJson","allProjectsQuery","concat","gridDoodles","rendered","uid","LabPage","location","fromPage","quoteIndex"],"mappings":"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","file":"component---src-pages-lab-js-e08f85d11346fb4f2ac6.js","sourcesContent":["import React from 'react';\n\nimport TextGrid from './text-grid';\nimport CycleText from './cycle-text';\n\nimport './grid-doodles.css';\n\nexport default [\n\t<TextGrid\n\t\tsize={[3, 3]}\n\t\tclassPrefix=\"doingreat\"\n\t\tclassName=\"content-node doodle\"\n\t\tOuterElement=\"li\"\n\t>\n\t\tDOINGREAT\n\t</TextGrid>,\n\t<CycleText\n\t\tclassPrefix=\"wavebump\"\n\t\tclassName=\"content-node doodle\"\n\t\tms={50}\n\t\tOuterElement=\"li\"\n\t>\n\t\t▁▂▃▅▆▇▇▆▅▃▂▁\n\t</CycleText>,\n\t<CycleText\n\t\tclassPrefix=\"droplet\"\n\t\tclassName=\"content-node doodle\"\n\t\tms={150}\n\t\tOuterElement=\"li\"\n\t>\n\t\t⊙⊚⦾⊛\n\t</CycleText>,\n\t<CycleText\n\t\tclassPrefix=\"circles\"\n\t\tclassName=\"content-node doodle\"\n\t\tms={100}\n\t\tsize={[2, 2]}\n\t\tOuterElement=\"li\"\n\t>\n\t\t◯⦿◉◎\n\t</CycleText>,\n\t<li className=\"content-node snowman doodle\">☃</li>,\n\t<CycleText\n\t\tclassPrefix=\"wavebump\"\n\t\tclassName=\"content-node tall doodle\"\n\t\tms={400}\n\t\tOuterElement=\"li\"\n\t>\n\t\tGrEeTiNgShUmAn\n\t</CycleText>,\n];\n","// TODO(RILEY): https://tympanus.net/Development/TiltHoverEffects/index.html\nimport React, {Fragment} from 'react';\nimport {useStaticQuery, graphql} from 'gatsby';\n\nimport sortingMethods, {shuffle} from '../util/sorting-methods';\nimport allProjectsQuery from '../util/all-projects-query';\nimport contentTypes from '../util/content-types';\n\nimport gridDoodles from './grid-doodles';\nimport ContentGrid from './content-grid';\nimport AutoLink from './auto-link';\n\nimport './project-explorer.css';\n\nclass ProjectExplorer extends React.PureComponent {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tconst nodeTypes = Array.from(\n\t\t\tnew Set(this.props.nodes.map(n => n.type))\n\t\t);\n\t\tconst initialState = {\n\t\t\tnodeTypes,\n\t\t\ttypeStates: nodeTypes.map(\n\t\t\t\ttype => type === 'project' || type === 'doodle'\n\t\t\t),\n\t\t\tsortIdx: 0,\n\t\t\tascending: false,\n\t\t\tfilterType: 'any',\n\t\t\ttagStates: Array.from(props.tags).fill(0),\n\t\t\tdrawerOpen: false,\n\t\t};\n\n\t\tthis.state = {\n\t\t\t...initialState,\n\t\t\tnodes: this.getDisplayNodes(initialState, props),\n\t\t};\n\t}\n\n\t// HACK(riley): Better to not use state and memoize this on `props.nodes`.\n\tgetNodeTypes = (state = this.state) => state.nodeTypes;\n\n\tgetDisplayNodes(state, {tags, nodes}) {\n\t\tconst {sortFn} = sortingMethods[state.sortIdx];\n\t\tconst checkedTypeNames = this.getNodeTypes(state).filter(\n\t\t\t(_, i) => state.typeStates[i]\n\t\t);\n\t\tconst checkedTagNames = tags\n\t\t\t.filter((_, i) => state.tagStates[i])\n\t\t\t.map(tag => tag.name);\n\t\tconst [doodles, filteredByType] = (checkedTypeNames.length\n\t\t\t? nodes.filter(node =>\n\t\t\t\t\tcheckedTypeNames.some(type => node.type === type)\n\t\t\t  )\n\t\t\t: nodes\n\t\t).reduce(\n\t\t\t(partitions, node) => {\n\t\t\t\tpartitions[node.type === 'doodle' ? 0 : 1].push(node);\n\t\t\t\treturn partitions;\n\t\t\t},\n\t\t\t[[], []]\n\t\t);\n\t\tconst filtered = checkedTagNames.length\n\t\t\t? filteredByType.filter(node =>\n\t\t\t\t\tcheckedTagNames[\n\t\t\t\t\t\tstate.filterType === 'any' ? 'some' : 'every'\n\t\t\t\t\t](tagName => node.tags && node.tags.includes(tagName))\n\t\t\t  )\n\t\t\t: filteredByType;\n\t\tconst sorted = sortFn(filtered);\n\t\tconst ordered = state.ascending ? sorted.reverse() : sorted;\n\t\t// Insert doodles into a random position.\n\t\tdoodles.forEach(doodle =>\n\t\t\tordered.splice(\n\t\t\t\tMath.floor(Math.random() * ordered.length),\n\t\t\t\t0,\n\t\t\t\tdoodle\n\t\t\t)\n\t\t);\n\t\treturn ordered;\n\t}\n\n\trefreshDisplayNodes = () => {\n\t\tthis.setState((state, props) => ({\n\t\t\tnodes: this.getDisplayNodes(state, props),\n\t\t}));\n\t};\n\n\tshuffleDisplayNodes = () => {\n\t\tthis.setState(({nodes}) => {\n\t\t\treturn {nodes: shuffle(nodes)};\n\t\t});\n\t};\n\n\thandleSortMethodChange = sortIdx => {\n\t\tthis.setState({sortIdx}, this.refreshDisplayNodes);\n\t};\n\n\thandleFilterTypeChange = e => {\n\t\tthis.setState({filterType: e.target.value}, this.refreshDisplayNodes);\n\t};\n\n\thandleTypeStateChange = (e, typeIdx) => {\n\t\tconst {checked} = e.target;\n\t\tthis.setState(({typeStates}) => {\n\t\t\tconst updatedTypeStates = [...typeStates];\n\t\t\tupdatedTypeStates[typeIdx] = checked;\n\t\t\treturn {typeStates: updatedTypeStates};\n\t\t}, this.refreshDisplayNodes);\n\t};\n\n\thandleClearTypesClick = () => {\n\t\tthis.setState(\n\t\t\t{typeStates: new Array(this.getNodeTypes().length).fill(0)},\n\t\t\tthis.refreshDisplayNodes\n\t\t);\n\t};\n\n\thandleTagStateChange = (e, tagIdx) => {\n\t\tconst {checked} = e.target;\n\t\tthis.setState(({tagStates}) => {\n\t\t\tconst updatedTagStates = [...tagStates];\n\t\t\tupdatedTagStates[tagIdx] = checked;\n\t\t\treturn {tagStates: updatedTagStates};\n\t\t}, this.refreshDisplayNodes);\n\t};\n\n\thandleClearTagsClick = () => {\n\t\tthis.setState(\n\t\t\t{tagStates: new Array(this.props.tags.length).fill(0)},\n\t\t\tthis.refreshDisplayNodes\n\t\t);\n\t};\n\n\thandleAscendingChange = e => {\n\t\tthis.setState({ascending: e.target.checked}, this.refreshDisplayNodes);\n\t};\n\n\trender() {\n\t\tconst {tags} = this.props;\n\t\tconst {nodes} = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"project-explorer\">\n\t\t\t\t<p className=\"result-details warning\">\n\t\t\t\t\tHi! I'm still developing this part of the website, so I\n\t\t\t\t\tapologize if it crashes your browser. Good luck!\n\t\t\t\t</p>\n\t\t\t\t<p className=\"result-details warning\">\n\t\t\t\t\tI host a{' '}\n\t\t\t\t\t<AutoLink to=\"https://v14.rileyjshaw.com/lab\">\n\t\t\t\t\t\tmirror of my old website\n\t\t\t\t\t</AutoLink>{' '}\n\t\t\t\t\tif needed.\n\t\t\t\t</p>\n\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"project-explorer-hide-filters\"\n\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\tthis.setState(({drawerOpen}) => ({\n\t\t\t\t\t\t\tdrawerOpen: !drawerOpen,\n\t\t\t\t\t\t}))\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\t{this.state.drawerOpen\n\t\t\t\t\t\t? 'Hide filters ▲'\n\t\t\t\t\t\t: 'Show filters ▼'}\n\t\t\t\t</button>\n\t\t\t\t<div className=\"filters\">\n\t\t\t\t\t{this.state.drawerOpen && (\n\t\t\t\t\t\t<fieldset className=\"controls\">\n\t\t\t\t\t\t\t{/* TODO(riley): Once display: contents or display:\n\t\t\t\t\t\tsubgrid have good support, get rid of the .inputs\n\t\t\t\t\t\twrappers and nest fieldsets (display: contents) around\n\t\t\t\t\t\teach legend / .inputs / button set. Until then, the\n\t\t\t\t\t\tchildren need to be direct descendents of the grid… */}\n\t\t\t\t\t\t\t<legend>Show:</legend>\n\t\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t\t{this.getNodeTypes().map((type, i) => (\n\t\t\t\t\t\t\t\t\t<Fragment key={type}>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tname={`labs-types-${type}`}\n\t\t\t\t\t\t\t\t\t\t\tid={`labs-types-${type}`}\n\t\t\t\t\t\t\t\t\t\t\tvalue={type}\n\t\t\t\t\t\t\t\t\t\t\tchecked={this.state.typeStates[i]}\n\t\t\t\t\t\t\t\t\t\t\tonChange={e =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.handleTypeStateChange(\n\t\t\t\t\t\t\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\t\t\t\t\t\t\ti\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<label htmlFor={`labs-types-${type}`}>\n\t\t\t\t\t\t\t\t\t\t\t{contentTypes[type].readableType}s\n\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"labs-clear-types\"\n\t\t\t\t\t\t\t\tonClick={this.handleClearTypesClick}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tX\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<legend>Sort by:</legend>\n\t\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t\t{sortingMethods.map(({title}, i) => (\n\t\t\t\t\t\t\t\t\t<Fragment key={title}>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\t\t\t\t\tname={`labs-sort-${title}`}\n\t\t\t\t\t\t\t\t\t\t\tid={`labs-sort-${title}`}\n\t\t\t\t\t\t\t\t\t\t\tvalue={title}\n\t\t\t\t\t\t\t\t\t\t\tchecked={this.state.sortIdx === i}\n\t\t\t\t\t\t\t\t\t\t\tonChange={() =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.handleSortMethodChange(i)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<label htmlFor={`labs-sort-${title}`}>\n\t\t\t\t\t\t\t\t\t\t\t{title.toUpperCase().slice(0, 1) +\n\t\t\t\t\t\t\t\t\t\t\t\ttitle.slice(1)}\n\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<legend>Order:</legend>\n\t\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\tname=\"labs-order\"\n\t\t\t\t\t\t\t\t\tid=\"labs-order\"\n\t\t\t\t\t\t\t\t\tvalue=\"ascending\"\n\t\t\t\t\t\t\t\t\tchecked={this.state.ascending}\n\t\t\t\t\t\t\t\t\tonChange={this.handleAscendingChange}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<label htmlFor=\"labs-order\">Reverse</label>\n\t\t\t\t\t\t\t\t<button onClick={this.shuffleDisplayNodes}>\n\t\t\t\t\t\t\t\t\tShuffle\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{/* <legend>Match:</legend>\n\t\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\t\t\tname=\"labs-filter-any\"\n\t\t\t\t\t\t\t\t\tid=\"labs-filter-any\"\n\t\t\t\t\t\t\t\t\tvalue=\"any\"\n\t\t\t\t\t\t\t\t\tchecked={this.state.filterType === 'any'}\n\t\t\t\t\t\t\t\t\tonChange={this.handleFilterTypeChange}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<label htmlFor=\"labs-filter-any\">Any</label>\n\t\t\t\t\t\t\t\t|\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\t\t\tname=\"labs-filter-all\"\n\t\t\t\t\t\t\t\t\tid=\"labs-filter-all\"\n\t\t\t\t\t\t\t\t\tvalue=\"all\"\n\t\t\t\t\t\t\t\t\tchecked={this.state.filterType === 'all'}\n\t\t\t\t\t\t\t\t\tonChange={this.handleFilterTypeChange}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<label htmlFor=\"labs-filter-all\">All</label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<legend>Of:</legend>\n\t\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t\t{tags.map((tag, i) => (\n\t\t\t\t\t\t\t\t\t<Fragment key={tag.name}>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tname={`labs-tags-${tag.name}`}\n\t\t\t\t\t\t\t\t\t\t\tid={`labs-tags-${tag.name}`}\n\t\t\t\t\t\t\t\t\t\t\tvalue={tag.name}\n\t\t\t\t\t\t\t\t\t\t\tchecked={this.state.tagStates[i]}\n\t\t\t\t\t\t\t\t\t\t\tonChange={e =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.handleTagStateChange(e, i)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<label\n\t\t\t\t\t\t\t\t\t\t\thtmlFor={`labs-tags-${tag.name}`}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{tag.readable}\n\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"labs-clear-tags\"\n\t\t\t\t\t\t\t\tonClick={this.handleClearTagsClick}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tX\n\t\t\t\t\t\t\t</button> */}\n\t\t\t\t\t\t</fieldset>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t<p className=\"result-details\">\n\t\t\t\t\tFound <strong>{nodes.length}</strong> entries from{' '}\n\t\t\t\t\t<strong>\n\t\t\t\t\t\t{this.state.typeStates.reduce((a, b) => a + b) ||\n\t\t\t\t\t\t\tthis.state.typeStates.length}\n\t\t\t\t\t</strong>{' '}\n\t\t\t\t\tsources:\n\t\t\t\t</p>\n\t\t\t\t<ContentGrid nodes={nodes} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default props => {\n\tconst {\n\t\tallTagsJson: {nodes: tags},\n\t} = useStaticQuery(graphql`\n\t\t{\n\t\t\tallTagsJson {\n\t\t\t\tnodes {\n\t\t\t\t\tname\n\t\t\t\t\treadable\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`);\n\n\tconst nodes = allProjectsQuery().concat(\n\t\tgridDoodles.map((rendered, i) => ({\n\t\t\tuid: `DOODLE_${i}`,\n\t\t\ttype: 'doodle',\n\t\t\trendered,\n\t\t}))\n\t);\n\n\treturn <ProjectExplorer nodes={nodes} tags={tags} {...props} />;\n};\n","import React from 'react';\n\nimport BigQuote from '../components/big-quote';\nimport GoUp from '../components/go-up';\nimport Layout from '../components/layout';\nimport PageHeader from '../components/page-header';\nimport ProjectExplorer from '../components/project-explorer';\nimport SEO from '../components/seo';\n\nconst LabPage = ({location}) => (\n\t<Layout>\n\t\t<SEO title=\"Lab\" />\n\t\t<PageHeader fromPage={location?.state?.fromPage}>Lab</PageHeader>\n\t\t<ProjectExplorer />\n\t\t<BigQuote quoteIndex={3} />\n\t\t<GoUp />\n\t</Layout>\n);\n\nexport default LabPage;\n"],"sourceRoot":""}