{"version":3,"file":"component---src-pages-lab-jsx-6b9c598194a26fe08722.js","mappings":"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","sources":["webpack://rileyjshaw.com/./src/components/GridDoodles.jsx","webpack://rileyjshaw.com/./src/components/ProjectExplorer.jsx","webpack://rileyjshaw.com/./src/pages/lab.jsx"],"sourcesContent":["import CycleText from './CycleText';\nimport BackgroundGenerator from './doodles/BackgroundGenerator';\nimport CircleConstrainedLines from './doodles/CircleConstrainedLines';\nimport GameOver from './doodles/GameOver';\nimport Riot from './doodles/Riot';\nimport './GridDoodles.css';\nimport TextGrid from './TextGrid';\nimport React from 'react';\n\nexport default [\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<BackgroundGenerator El=\"li\" ref={ref} />\n\t\t)),\n\t\t0.8,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<CircleConstrainedLines El=\"li\" ref={ref} />\n\t\t)),\n\t\t0.8,\n\t],\n\t[React.forwardRef((props, ref) => <GameOver ref={ref} />), 0.8],\n\t[React.forwardRef((props, ref) => <Riot ref={ref} />), 0.7],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<li className=\"doodle wavytext\" ref={ref}>\n\t\t\t\t{'rileyjshaw'.split('').map((letter, i, {length}) => (\n\t\t\t\t\t<span\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tstyle={{animationDelay: `${(i - length) * 0.2}s`}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{letter}\n\t\t\t\t\t</span>\n\t\t\t\t))}\n\t\t\t</li>\n\t\t)),\n\t\t0.2,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<TextGrid\n\t\t\t\tsize={[3, 3]}\n\t\t\t\tclassPrefix=\"doingreat\"\n\t\t\t\tclassName=\"content-node doodle\"\n\t\t\t\tOuterElement=\"li\"\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\tDOINGREAT\n\t\t\t</TextGrid>\n\t\t)),\n\t\t0.1,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<CycleText\n\t\t\t\tclassPrefix=\"wavebump\"\n\t\t\t\tclassName=\"content-node doodle\"\n\t\t\t\tms={50}\n\t\t\t\tOuterElement=\"li\"\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\t▁▂▃▅▆▇▇▆▅▃▂▁\n\t\t\t</CycleText>\n\t\t)),\n\t\t0.3,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<CycleText\n\t\t\t\tclassPrefix=\"droplet\"\n\t\t\t\tclassName=\"content-node doodle\"\n\t\t\t\tms={150}\n\t\t\t\tOuterElement=\"li\"\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\t⊙⊚⦾⊛\n\t\t\t</CycleText>\n\t\t)),\n\t\t0.2,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<CycleText\n\t\t\t\tclassPrefix=\"circles\"\n\t\t\t\tclassName=\"content-node doodle\"\n\t\t\t\tms={100}\n\t\t\t\tsize={[2, 2]}\n\t\t\t\tOuterElement=\"li\"\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\t◯⦿◉◎\n\t\t\t</CycleText>\n\t\t)),\n\t\t0.2,\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<li className=\"content-node snowman doodle\" ref={ref}>\n\t\t\t\t☃\n\t\t\t</li>\n\t\t)),\n\t\t0.3,\n\t\t() => {\n\t\t\tconst month = new Date().getMonth();\n\t\t\treturn month < 4 || month === 11;\n\t\t},\n\t],\n\t[\n\t\tReact.forwardRef((props, ref) => (\n\t\t\t<CycleText\n\t\t\t\tclassPrefix=\"wavebump\"\n\t\t\t\tclassName=\"content-node tall doodle\"\n\t\t\t\tms={400}\n\t\t\t\tOuterElement=\"li\"\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\tSecret message!\n\t\t\t</CycleText>\n\t\t)),\n\t\t0.05,\n\t\t() => {\n\t\t\tconst today = new Date();\n\t\t\treturn today.getMonth() === 11 && today.getDate() === 25;\n\t\t},\n\t],\n].map(([Component, chance, fn]) => [\n\tComponent,\n\tfn ? () => fn() || Math.random() < chance : () => Math.random() < chance,\n]);\n","// TODO(RILEY): https://tympanus.net/Development/TiltHoverEffects/index.html\nimport allProjectsQuery from '../util/all-projects-query';\nimport {STORAGE_KEYS} from '../util/constants';\nimport contentTypes from '../util/ContentTypes';\nimport {useViewport, useStickyState} from '../util/hooks';\nimport sortingMethods, {shuffle} from '../util/sorting-methods';\nimport ContentGrid from './ContentGrid';\nimport gridDoodles from './GridDoodles';\nimport './ProjectExplorer.css';\nimport {useStaticQuery, graphql} from 'gatsby';\nimport React, {Fragment, useState, useEffect, useMemo} from 'react';\n\nconst ProjectExplorer = React.memo(function ProjectExplorer(props) {\n\tconst [nodeTypes, version] = useMemo(() => {\n\t\tconst nodeTypes = Array.from(\n\t\t\tnew Set(props.nodes.map(n => n.type)),\n\t\t).sort((a, b) => a.localeCompare(b));\n\t\treturn [nodeTypes, `${nodeTypes.join('')}${sortingMethods.length}`];\n\t}, [props.nodes]);\n\n\tconst [drawerOpen, setDrawerOpen] = useState(false);\n\tconst [ascending, setAscending] = useStickyState(\n\t\tfalse,\n\t\tSTORAGE_KEYS.labAscending,\n\t\t{version},\n\t);\n\tconst [sortIdx, setSortIdx] = useStickyState(0, STORAGE_KEYS.labSortIdx, {\n\t\tversion,\n\t});\n\tconst [typeStates, setTypeStates] = useStickyState(\n\t\t() => Array.from(nodeTypes).fill(true),\n\t\tSTORAGE_KEYS.labTypeStates,\n\t\t{version, serverState: []},\n\t);\n\n\tconst nSources =\n\t\ttypeStates.reduce((a, b) => a + b, 0) || typeStates.length;\n\n\tconst nodes = useMemo(() => {\n\t\tif (!typeStates.length) return null;\n\t\tconst {sortFn} = sortingMethods[sortIdx];\n\t\tconst checkedTypeNames = nodeTypes.filter((_, i) => typeStates[i]);\n\t\tconst [doodles, filtered] = (\n\t\t\tcheckedTypeNames.length\n\t\t\t\t? props.nodes.filter(node =>\n\t\t\t\t\t\tcheckedTypeNames.includes(node.type),\n\t\t\t\t  )\n\t\t\t\t: props.nodes\n\t\t).reduce(\n\t\t\t(partitions, node) => {\n\t\t\t\tpartitions[node.type === 'doodle' ? 0 : 1].push(node);\n\t\t\t\treturn partitions;\n\t\t\t},\n\t\t\t[[], []],\n\t\t);\n\t\tconst sorted = sortFn(filtered);\n\t\tconst ordered = ascending ? sorted.reverse() : sorted;\n\t\t// Insert a few doodles into a random position.\n\t\tdoodles.forEach(doodle => {\n\t\t\tconst {shouldRender, ...rest} = doodle;\n\t\t\tif (shouldRender()) {\n\t\t\t\tordered.splice(\n\t\t\t\t\tMath.floor(Math.random() * ordered.length),\n\t\t\t\t\t0,\n\t\t\t\t\trest,\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t\treturn ordered;\n\t}, [ascending, sortIdx, typeStates, props.nodes]);\n\n\treturn (\n\t\tnodes && (\n\t\t\t<div className=\"project-explorer\">\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"project-explorer-hide-filters\"\n\t\t\t\t\tonClick={() => setDrawerOpen(openState => !openState)}\n\t\t\t\t>\n\t\t\t\t\t{drawerOpen ? 'Hide filters ▲' : 'Show filters ▼'}\n\t\t\t\t</button>\n\t\t\t\t<div className=\"filters\">\n\t\t\t\t\t{drawerOpen && (\n\t\t\t\t\t\t/* TODO(riley): Once display: contents or display:\n\t\t\t\tsubgrid have good support, replace <p.legend> with\n\t\t\t\t<legend>, get rid of the .inputs wrappers, and nest\n\t\t\t\t<fieldset>s (display: contents) around each <legend> /\n\t\t\t\t.inputs / button set. Until then, the children need to\n\t\t\t\tbe direct descendents of the grid, and a11y takes a\n\t\t\t\thit. */\n\t\t\t\t\t\t<div className=\"controls\">\n\t\t\t\t\t\t\t<p className=\"legend\">Show:</p>\n\t\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t\t{nodeTypes.map((type, i) => (\n\t\t\t\t\t\t\t\t\t<Fragment key={type}>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"visually-hidden\"\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\tname={`labs-types-${type}`}\n\t\t\t\t\t\t\t\t\t\t\tid={`labs-types-${type}`}\n\t\t\t\t\t\t\t\t\t\t\tvalue={type}\n\t\t\t\t\t\t\t\t\t\t\tchecked={typeStates[i]}\n\t\t\t\t\t\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst {checked} = e.target;\n\t\t\t\t\t\t\t\t\t\t\t\tsetTypeStates(\n\t\t\t\t\t\t\t\t\t\t\t\t\tprevTypeStates => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst updatedTypeStates =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t...prevTypeStates,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdatedTypeStates[i] =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn updatedTypeStates;\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<label htmlFor={`labs-types-${type}`}>\n\t\t\t\t\t\t\t\t\t\t\t{contentTypes[type].readableType}s\n\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"labs-clear labs-clear-types\"\n\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\tsetTypeStates(\n\t\t\t\t\t\t\t\t\t\tnew Array(nodeTypes.length).fill(\n\t\t\t\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t✖\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<p className=\"legend\">Sort by:</p>\n\t\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t\t{sortingMethods.map(({title}, i) => (\n\t\t\t\t\t\t\t\t\t<Fragment key={title}>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"visually-hidden\"\n\t\t\t\t\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\t\t\t\t\tname={`labs-sort-${title}`}\n\t\t\t\t\t\t\t\t\t\t\tid={`labs-sort-${title}`}\n\t\t\t\t\t\t\t\t\t\t\tvalue={title}\n\t\t\t\t\t\t\t\t\t\t\tchecked={sortIdx === i}\n\t\t\t\t\t\t\t\t\t\t\tonChange={() => setSortIdx(i)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<label htmlFor={`labs-sort-${title}`}>\n\t\t\t\t\t\t\t\t\t\t\t{title.toUpperCase().slice(0, 1) +\n\t\t\t\t\t\t\t\t\t\t\t\ttitle.slice(1)}\n\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<p className=\"legend\">Order:</p>\n\t\t\t\t\t\t\t<div className=\"inputs\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tclassName=\"visually-hidden\"\n\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\tname=\"labs-order\"\n\t\t\t\t\t\t\t\t\tid=\"labs-order\"\n\t\t\t\t\t\t\t\t\tvalue=\"ascending\"\n\t\t\t\t\t\t\t\t\tchecked={ascending}\n\t\t\t\t\t\t\t\t\tonChange={e =>\n\t\t\t\t\t\t\t\t\t\tsetAscending(e.target.checked)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<label htmlFor=\"labs-order\">Reverse</label>\n\t\t\t\t\t\t\t\t{/* TODO: Add the shuffle button back here!\n\n\t\t\t\t\t\t\t<button onClick={this.shuffleDisplayNodes}>\n\t\t\t\t\t\t\t\tShuffle\n\t\t\t\t\t\t\t</button> */}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t<p className=\"result-details\">\n\t\t\t\t\tFound <strong>{nodes.length}</strong> entries from{' '}\n\t\t\t\t\t<strong>{nSources}</strong> source\n\t\t\t\t\t{nSources === 1 ? '' : 's'}:\n\t\t\t\t</p>\n\t\t\t\t<LazyGrid\n\t\t\t\t\tnodes={nodes}\n\t\t\t\t\tsetIsFullyLoaded={props.setIsFullyLoaded}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t);\n});\n\nconst LazyGrid = React.memo(({nodes, setIsFullyLoaded}) => {\n\tconst [renderLimit, setRenderLimit] = useState(20);\n\tconst [ref, inView, boundingClientRect] = useViewport();\n\n\t// If the last node is on or above the viewport, load the next 20 nodes.\n\t// Note that the “last” node might be higher up on the page, eg. if it has\n\t// a small footprint and squeezes into some top row masonry. Hence the on\n\t// *or above* the viewport check.\n\tuseEffect(() => {\n\t\tif (\n\t\t\t(inView || boundingClientRect?.bottom <= 0) &&\n\t\t\trenderLimit < nodes.length\n\t\t) {\n\t\t\tsetRenderLimit(l => l + 20);\n\t\t}\n\t}, [inView, boundingClientRect]);\n\n\tuseEffect(() => {\n\t\tsetRenderLimit(20);\n\t}, [nodes]);\n\n\tuseEffect(() => {\n\t\tsetIsFullyLoaded && setIsFullyLoaded(renderLimit >= nodes.length);\n\t}, [nodes.length, renderLimit]);\n\n\treturn (\n\t\t<ContentGrid\n\t\t\tmasonry\n\t\t\tnodes={nodes.slice(0, renderLimit)}\n\t\t\thiddenNodes={nodes.slice(renderLimit)}\n\t\t\tlazyLoadRef={ref}\n\t\t/>\n\t);\n});\n\nconst ProjectExplorerWrapper = React.memo(props => {\n\tconst {\n\t\tallTagsJson: {nodes: tags},\n\t} = useStaticQuery(graphql`\n\t\t{\n\t\t\tallTagsJson {\n\t\t\t\tnodes {\n\t\t\t\t\tname\n\t\t\t\t\treadable\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`);\n\tconst allProjects = allProjectsQuery();\n\tconst nodes = useMemo(\n\t\t() =>\n\t\t\tallProjects.concat(\n\t\t\t\tgridDoodles.map(([Doodle, shouldRender], i) => ({\n\t\t\t\t\tuid: `DOODLE_${i}`,\n\t\t\t\t\ttype: 'doodle',\n\t\t\t\t\tDoodle,\n\t\t\t\t\tshouldRender,\n\t\t\t\t})),\n\t\t\t),\n\t\t[allProjects],\n\t);\n\n\treturn <ProjectExplorer nodes={nodes} tags={tags} {...props} />;\n});\n\nexport default ProjectExplorerWrapper;\n\n/* Big TODO: Once tags are established and applied to each content node (lots\n   of manual work required before that happens), get filtering by tag back into\n   the component. Here’s an old snippet:\n\n\t\tconst filtered = checkedTagNames.length\n\t\t\t? filteredByType.filter(node =>\n\t\t\t\t\tcheckedTagNames[\n\t\t\t\t\t\tstate.filterType === 'any' ? 'some' : 'every'\n\t\t\t\t\t](tagName => node.tags && node.tags.includes(tagName))\n\t\t\t  )\n\t\t\t: filteredByType;\n\n\t\t// …\n\t\t// …then for the render:\n\t\t// …\n\n\t\t<p className=\"legend\">Match:</p>\n\t\t<div className=\"inputs\">\n\t\t\t<input\n\t\t\t\ttype=\"radio\"\n\t\t\t\tname=\"labs-filter-any\"\n\t\t\t\tid=\"labs-filter-any\"\n\t\t\t\tvalue=\"any\"\n\t\t\t\tchecked={this.state.filterType === 'any'}\n\t\t\t\tonChange={this.handleFilterTypeChange}\n\t\t\t/>\n\t\t\t<label htmlFor=\"labs-filter-any\">Any</label>\n\t\t\t|\n\t\t\t<input\n\t\t\t\ttype=\"radio\"\n\t\t\t\tname=\"labs-filter-all\"\n\t\t\t\tid=\"labs-filter-all\"\n\t\t\t\tvalue=\"all\"\n\t\t\t\tchecked={this.state.filterType === 'all'}\n\t\t\t\tonChange={this.handleFilterTypeChange}\n\t\t\t/>\n\t\t\t<label htmlFor=\"labs-filter-all\">All</label>\n\t\t</div>\n\t\t<p className=\"legend\">Of:</p>\n\t\t<div className=\"inputs\">\n\t\t\t{tags.map((tag, i) => (\n\t\t\t\t<Fragment key={tag.name}>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tname={`labs-tags-${tag.name}`}\n\t\t\t\t\t\tid={`labs-tags-${tag.name}`}\n\t\t\t\t\t\tvalue={tag.name}\n\t\t\t\t\t\tchecked={this.state.tagStates[i]}\n\t\t\t\t\t\tonChange={e =>\n\t\t\t\t\t\t\tthis.handleTagStateChange(e, i)\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t<label\n\t\t\t\t\t\thtmlFor={`labs-tags-${tag.name}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t{tag.readable}\n\t\t\t\t\t</label>\n\t\t\t\t</Fragment>\n\t\t\t))}\n\t\t</div>\n\t\t<button\n\t\t\tclassName=\"labs-clear labs-clear-tags\"\n\t\t\tonClick={this.handleClearTagsClick}\n\t\t>\n\t\t\t✖\n\t\t</button>\n*/\n","import BigQuote from '../components/BigQuote';\nimport GoUp from '../components/GoUp';\nimport ProjectExplorer from '../components/ProjectExplorer';\nimport SEO from '../components/SEO';\nimport React, {useState} from 'react';\n\nexport function Head(props) {\n\treturn <SEO {...props} title=\"Lab\" />;\n}\n\nconst LabPage = () => {\n\tconst [isFullyLoaded, setIsFullyLoaded] = useState(false);\n\n\treturn (\n\t\t<>\n\t\t\t<ProjectExplorer setIsFullyLoaded={setIsFullyLoaded} />\n\t\t\t{isFullyLoaded && (\n\t\t\t\t<>\n\t\t\t\t\t<BigQuote quoteId=\"VOLTAIRE_BORING\" />\n\t\t\t\t\t<GoUp />\n\t\t\t\t</>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default LabPage;\n"],"names":["React","props","ref","BackgroundGenerator","El","CircleConstrainedLines","GameOver","Riot","className","split","map","letter","i","_ref","length","key","style","animationDelay","TextGrid","size","classPrefix","OuterElement","CycleText","ms","month","Date","getMonth","today","getDate","_ref2","Component","chance","fn","Math","random","ProjectExplorer","nodeTypes","version","useMemo","Array","from","Set","nodes","n","type","sort","a","b","localeCompare","join","sortingMethods","drawerOpen","setDrawerOpen","useState","ascending","setAscending","useStickyState","STORAGE_KEYS","labAscending","sortIdx","setSortIdx","labSortIdx","typeStates","setTypeStates","fill","labTypeStates","serverState","nSources","reduce","sortFn","checkedTypeNames","filter","_","doodles","filtered","node","includes","partitions","push","sorted","ordered","reverse","forEach","doodle","shouldRender","rest","splice","floor","onClick","openState","Fragment","name","id","value","checked","onChange","e","target","prevTypeStates","updatedTypeStates","htmlFor","contentTypes","readableType","title","toUpperCase","slice","LazyGrid","setIsFullyLoaded","renderLimit","setRenderLimit","inView","boundingClientRect","useViewport","useEffect","bottom","l","ContentGrid","masonry","hiddenNodes","lazyLoadRef","allTagsJson","tags","useStaticQuery","allProjects","allProjectsQuery","concat","gridDoodles","_ref3","Doodle","uid","Object","assign","Head","SEO","LabPage","isFullyLoaded","BigQuote","quoteId","GoUp"],"sourceRoot":""}