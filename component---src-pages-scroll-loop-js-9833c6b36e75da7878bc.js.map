{"version":3,"sources":["webpack:///./src/pages/scroll-loop.js","webpack:///./node_modules/react-intersection-observer/react-intersection-observer.m.js"],"names":["Page","page","className","Quote","children","onChange","threshold","inView","entry","isIntersecting","boundingClientRect","y","FullPage","useState","height","setHeight","ref","useRef","useLayoutEffect","current","clientHeight","args","setPage","handlePageChange","p","Array","from","length","_","i","key","_extends","Object","assign","target","arguments","source","prototype","hasOwnProperty","call","apply","this","ObserverMap","Map","RootIds","rootId","optionsToId","options","keys","sort","filter","undefined","map","root","has","set","toString","get","observe","element","callback","_createObserver","id","instance","thresholds","elements","observer","IntersectionObserver","entries","forEach","_elements$get","some","intersectionRatio","trackVisibility","isVisible","isArray","createObserver","callbacks","push","splice","indexOf","unobserve","size","disconnect","isPlainChildren","props","InView","_React$Component","subClass","superClass","_this","node","_unobserveCb","handleNode","triggerOnce","skip","setState","initialInView","observeNode","handleChange","state","create","constructor","__proto__","_proto","componentDidUpdate","prevProps","rootMargin","delay","componentWillUnmount","_this$props","render","_this$state","_this$props2","as","tag","excluded","sourceKeys","_objectWithoutPropertiesLoose","useInView","_temp","_ref","_React$useState","setRef","result","displayName","defaultProps"],"mappings":"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","file":"component---src-pages-scroll-loop-js-9833c6b36e75da7878bc.js","sourcesContent":["// Some initial work at trying to get an infinite scroll page going.\n\nimport React, {useState, useLayoutEffect, useRef} from 'react';\nimport {InView} from 'react-intersection-observer';\n\nimport './scroll-loop.css';\n\nconst Page = ({page}) => (\n\t<div className=\"fullscreen plus\">\n\t\t<p>Page {page}</p>\n\t</div>\n);\n\nconst Quote = ({children, onChange}) => {\n\treturn (\n\t\t<InView\n\t\t\tthreshold={0.3}\n\t\t\tclassName=\"fullscreen\"\n\t\t\tonChange={(inView, entry) => {\n\t\t\t\tif (\n\t\t\t\t\tentry.isIntersecting &&\n\t\t\t\t\tentry.boundingClientRect.y > 0 &&\n\t\t\t\t\tinView\n\t\t\t\t)\n\t\t\t\t\tonChange(inView);\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</InView>\n\t);\n};\n\nconst FullPage = ({page, onChange}) => {\n\tconst [height, setHeight] = useState(0);\n\tconst ref = useRef(null);\n\n\tuseLayoutEffect(() => {\n\t\tsetHeight(ref.current.clientHeight);\n\t});\n\n\treturn (\n\t\t<div ref={ref}>\n\t\t\t<Page page={page} />\n\t\t\t<Quote onChange={(...args) => onChange(height, ...args)}>\n\t\t\t\t<p>\"Quote {page}\"</p>\n\t\t\t</Quote>\n\t\t</div>\n\t);\n};\n\nexport default () => {\n\tconst [page, setPage] = useState(1);\n\tconst [[topPage, bottomPage], setPages] = useState([]);\n\t/*\n\n\tPage content\n\tFullscreen quote\n\tPage content\n\tFullscreen quote\n\tEtc.\n\n\tWhen you scroll into the quote with +ve Y, bottomPage becomes topPage,\n\tdestroy old topPage, create new bottomPage.\n\n\tIf you scroll out of the quote with +ve Y, topPage becomes bottomPage,\n\tdestroy old bottomPage, create new topPage.\n\n\t*/\n\n\tfunction handlePageChange(height, inView) {\n\t\tif (inView) {\n\t\t\tsetPage(p => p + 1);\n\t\t\t// window.scrollBy(0, -height);\n\t\t} else {\n\t\t\tsetPage(p => p - 1);\n\t\t\t// window.scrollBy(0, height);\n\t\t}\n\t}\n\treturn (\n\t\t<div className=\"scroll-container\">\n\t\t\t{Array.from(\n\t\t\t\t{length: 1000},\n\t\t\t\t(_, i) =>\n\t\t\t\t\tpage + 1 > i && (\n\t\t\t\t\t\t<FullPage\n\t\t\t\t\t\t\tpage={`${i + 1} / ${page}`}\n\t\t\t\t\t\t\tonChange={handlePageChange}\n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t)}\n\t\t</div>\n\t);\n};\n","import { createElement, Component, useRef, useState, useCallback, useEffect } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar ObserverMap = new Map();\nvar RootIds = new Map();\nvar rootId = 0;\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(function (key) {\n    return options[key] !== undefined;\n  }).map(function (key) {\n    return key + \"_\" + (key === 'root' ? getRootId(options.root) : options[key]);\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  var id = optionsToId(options);\n  var instance = ObserverMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    var elements = new Map();\n    var thresholds;\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _elements$get; // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n\n\n        var inView = entry.isIntersecting && thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        }); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    ObserverMap.set(id, instance);\n  }\n\n  return instance;\n}\n\nfunction observe(element, callback, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!element) return function () {}; // An observer with the same options can be reused, so lets use this fact\n\n  var _createObserver = createObserver(options),\n      id = _createObserver.id,\n      observer = _createObserver.observer,\n      elements = _createObserver.elements; // Register the callback listener for this element\n\n\n  var callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements[\"delete\"](element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      ObserverMap[\"delete\"](id);\n    }\n  };\n}\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n * Monitors scroll, and triggers the children function with updated props\r\n */\n\n\nvar InView = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(InView, _React$Component);\n\n  function InView(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.node = null;\n    _this._unobserveCb = null;\n\n    _this.handleNode = function (node) {\n      if (_this.node) {\n        // Clear the old observer, before we start observing a new element\n        _this.unobserve();\n\n        if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          _this.setState({\n            inView: !!_this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      _this.node = node ? node : null;\n\n      _this.observeNode();\n    };\n\n    _this.handleChange = function (inView, entry) {\n      if (inView && _this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        _this.unobserve();\n      }\n\n      if (!isPlainChildren(_this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        _this.setState({\n          inView: inView,\n          entry: entry\n        });\n      }\n\n      if (_this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        _this.props.onChange(inView, entry);\n      }\n    };\n\n    _this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n    return _this;\n  }\n\n  var _proto = InView.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  };\n\n  _proto.observeNode = function observeNode() {\n    if (!this.node || this.props.skip) return;\n    var _this$props = this.props,\n        threshold = _this$props.threshold,\n        root = _this$props.root,\n        rootMargin = _this$props.rootMargin,\n        trackVisibility = _this$props.trackVisibility,\n        delay = _this$props.delay;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold: threshold,\n      root: root,\n      rootMargin: rootMargin,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    });\n  };\n\n  _proto.unobserve = function unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  };\n\n  _proto.render = function render() {\n    if (!isPlainChildren(this.props)) {\n      var _this$state = this.state,\n          inView = _this$state.inView,\n          entry = _this$state.entry;\n      return this.props.children({\n        inView: inView,\n        entry: entry,\n        ref: this.handleNode\n      });\n    }\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        as = _this$props2.as,\n        tag = _this$props2.tag,\n        props = _objectWithoutPropertiesLoose(_this$props2, [\"children\", \"as\", \"tag\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\"]);\n\n    return /*#__PURE__*/createElement(as || tag || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  };\n\n  return InView;\n}(Component);\n\nInView.displayName = 'InView';\nInView.defaultProps = {\n  threshold: 0,\n  triggerOnce: false,\n  initialInView: false\n};\n\nfunction useInView(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      threshold = _ref.threshold,\n      delay = _ref.delay,\n      trackVisibility = _ref.trackVisibility,\n      rootMargin = _ref.rootMargin,\n      root = _ref.root,\n      triggerOnce = _ref.triggerOnce,\n      skip = _ref.skip,\n      initialInView = _ref.initialInView;\n\n  var unobserve = useRef();\n\n  var _React$useState = useState({\n    inView: !!initialInView\n  }),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  var setRef = useCallback(function (node) {\n    if (unobserve.current !== undefined) {\n      unobserve.current();\n      unobserve.current = undefined;\n    } // Skip creating the observer\n\n\n    if (skip) return;\n\n    if (node) {\n      unobserve.current = observe(node, function (inView, entry) {\n        setState({\n          inView: inView,\n          entry: entry\n        });\n\n        if (entry.isIntersecting && triggerOnce && unobserve.current) {\n          // If it should only trigger once, unobserve the element after it's inView\n          unobserve.current();\n          unobserve.current = undefined;\n        }\n      }, {\n        root: root,\n        rootMargin: rootMargin,\n        threshold: threshold,\n        // @ts-ignore\n        trackVisibility: trackVisibility,\n        // @ts-ignore\n        delay: delay\n      });\n    }\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, delay]);\n  /* eslint-disable-next-line */\n\n  useEffect(function () {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView\n      });\n    }\n  });\n  var result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport default InView;\nexport { InView, useInView };"],"sourceRoot":""}