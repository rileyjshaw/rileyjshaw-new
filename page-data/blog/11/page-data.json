{"componentChunkName":"component---src-templates-blog-list-js","path":"/blog/11","result":{"data":{"allMdx":{"edges":[{"node":{"description":"EDIT:  I no-longer work at Khan Academy, and most of these systems have changed drastically since 2015. This post was originally published on the  KA Engineering blog . I recently joined the developer team at Khan Academy. Since arriving I’ve been surprised by a number of intentional decisions the organization has made to empower its developers. Whether you’re working in tech or just curious about the inner workings of Khan Academy, there’s some great wisdom in how things are done here. All aboard! A benefit of working at an education startup is that everyone naturally puts a lot of thought into information design. As a result, this has been the smoothest onboarding I’ve experienced…","more":true,"frontmatter":{"layout":"post","tags":["education","life","web"]},"fields":{"uid":"POST_KHAN_ACADEMY_PRIMER","slug":"/blog/khan-academy-primer","title":"Khan Academy: a new employee's primer","date":"2015-07-20"}}},{"node":{"description":"An entirely skippable preface (Seriously, we don't start building it until the  third section .) While going through some of my dustier folders on a  flight to Hawaii  I came across  The Nature of Code . It's a lovely book with plenty of inspiration for simple demos; perfect plane material. After working through a few chapters, I moved my particle system and canvas logic into their own  util.js  file. Until then I'd been creating a new HTML file for each demo, manually adding the title, script includes, and next/previous links. This meant that I had to edit each file to include  util.js . It was a frustrating amount of overhead considering each demo only took a few minutes to write. Didn't…","more":true,"frontmatter":{"layout":"post","tags":["howto","web"]},"fields":{"uid":"POST_HOW_TO_GENERATE_A_STATIC_SITE_FROM_A_FOLDER_OF_ASSETS_USING_GULP","slug":"/blog/how-to-generate-a-static-site-from-a-folder-of-assets-using-Gulp","title":"How to generate a static site from a folder of assets using Gulp","date":"2015-03-05"}}}]},"allCombinedProjectsJson":{"nodes":[{"uid":"COMMIT_7E2CA523403D8403FAACC6D6DB0CF49D07A9C992","title":"Add Titania style","date":"2016-01-06","link":"http://rileyjshaw.commit--blog.com/rileyjshaw/LineMenuStyles/7e2ca523403d8403faacc6d6db0cf49d07a9c992","repo":"rileyjshaw/LineMenuStyles","description":"<p>Tested on latest IE, Firefox, Chrome, Safari.</p>\n\n<p>Screenshot:</p>\n\n<p><a href=\"https://camo.githubusercontent.com/8b148818499acc87fc183007cad064ecb46a89f6/68747470733a2f2f7a697070792e6766796361742e636f6d2f42696f64656772616461626c6543616c63756c6174696e67426561722e676966\" rel=\"noopener noreferrer\" target=\"_blank\"><img src=\"https://camo.githubusercontent.com/8b148818499acc87fc183007cad064ecb46a89f6/68747470733a2f2f7a697070792e6766796361742e636f6d2f42696f64656772616461626c6543616c63756c6174696e67426561722e676966\" alt=\"Screenshot\" data-canonical-src=\"https://zippy.gfycat.com/BiodegradableCalculatingBear.gif\" style=\"max-width:100%;\"></a></p>\n\n<p>It's responsive, too!</p>\n\n<p><a href=\"https://camo.githubusercontent.com/0230c59f3ad8732430ef7694f180a294d9d860ee/68747470733a2f2f7a697070792e6766796361742e636f6d2f4e6172726f774772697070696e67486172726965726861776b2e676966\" rel=\"noopener noreferrer\" target=\"_blank\"><img src=\"https://camo.githubusercontent.com/0230c59f3ad8732430ef7694f180a294d9d860ee/68747470733a2f2f7a697070792e6766796361742e636f6d2f4e6172726f774772697070696e67486172726965726861776b2e676966\" alt=\"Responsive screenshot\" data-canonical-src=\"https://zippy.gfycat.com/NarrowGrippingHarrierhawk.gif\" style=\"max-width:100%;\"></a></p>","more":false},{"uid":"COMMIT_E2592C54BF110E35957A6C093A79999C3A1047BB","title":"Rewrite extension and update version to 3.0.0","date":"2015-12-29","link":"http://rileyjshaw.commit--blog.com/rileyjshaw/dark-theme-everywhere/e2592c54bf110e35957a6c093a79999c3a1047bb","repo":"rileyjshaw/dark-theme-everywhere","description":"<p>Initially, this extension grabbed the content of a CSS file with an XMLHttpRequest and injected it into the bottom of the page. This had a few advantages:</p>\n\n<ol>\n<li>Text content could be easy processed and manipulated (admittedly, I wasn't using this for anything).</li>\n<li>Toggling styles was as easy as adding and removing a  element from &lt;body&gt;.&lt;/li&gt;\n&lt;li&gt;In theory, this strategy would beat out almost every other style rule (some inline styles excepted). &lt;a href=\"http://www.w3.org/TR/CSS2/cascade.html#cascading-order\"&gt;User &lt;code&gt;!important&lt;/code&gt; rules used to override author &lt;code&gt;!important&lt;/code&gt; rules&lt;/a&gt;, but Chrome &lt;a href=\"https://src.chromium.org/viewvc/chrome?revision=234007&amp;amp;view=revision\"&gt;no-longer does user stylesheets&lt;/a&gt;. I figured an aggressively &lt;code&gt;!important&lt;/code&gt; author stylesheet added at the very bottom of the page was pretty solid.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;After some testing, I realized that &lt;code&gt;!important&lt;/code&gt; styles from &lt;code&gt;content_scripts&lt;/code&gt; injection (along with chrome.tabs.insertCSS) actually &lt;em&gt;do&lt;/em&gt; take precedence over author stylesheets. Since 3) was the key consideration for my original decision, I re-wrote the extension to inject a stylesheet from &lt;code&gt;content_scripts&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;This change in architecture had pros and cons.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;+ Improved chance of dark theme winning out over author styles.\n+ Allowed styles to be applied before any other DOM is constructed, substantially reducing time-to-darkness.\n+ Simplified the callbacks between background.js and client.js, reduced code, and made the entire extension easier to reason about.\n\n- With 1) above, I could&amp;#39;ve handled variant rules (eg. specificityHelper) with a few regular expressions. Locking into a static stylesheet added some huge copypastas, tripling the size of main.css.\n- Injected stylesheets aren&amp;#39;t accessible once they&amp;#39;ve been added. Rather than &amp;quot;turning the styles off&amp;quot; like in 2), the best option was to add a toggle class to &amp;lt;body&amp;gt;.\n- Rewrites take time.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This commit was essentially a full rewrite, so I changed some smaller things while I was at it:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Styles now look for :not(.off) instead of .on. This makes the default dark and avoids a Blinding White Flash before the class changes.&lt;/li&gt;\n&lt;li&gt;Added id specificity helpers; it&amp;#39;s discussed further in client.js:24.&lt;/li&gt;\n&lt;li&gt;Renamed some files for clarity.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I came across some unfortunate Chromium bugs while working on this, which caused me to dive into that project. It&amp;#39;s huge! Lots of fun to poke around :)&lt;/p&gt;</li>\n</ol>","more":false},{"uid":"COMMIT_0167A91073922AC7B5018C6A73C894853DABBA56","title":"Remove numkey layout bindings","date":"2015-12-23","link":"http://rileyjshaw.commit--blog.com/rileyjshaw/.supermac/0167a91073922ac7b5018c6a73c894853dabba56","repo":"rileyjshaw/.supermac","description":"<p>1, 2, 3, and 4 are useful for app-specific bindings and should thus be reserved.</p>","more":false}]}},"pageContext":{"internalLimit":2,"internalSkip":8,"externalLimit":3,"externalSkip":42,"numPages":14,"currentPage":11}},"staticQueryHashes":["3605882644"]}