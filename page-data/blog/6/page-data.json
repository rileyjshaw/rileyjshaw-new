{"componentChunkName":"component---src-templates-blog-list-jsx","path":"/blog/6","result":{"data":{"allMdx":{"nodes":[]},"allCombinedProjectsJson":{"nodes":[{"uid":"COMMIT_5BD325E113AC998737005467529F93AED8791F45","title":"Add Dwitter data and some initial scraper options","date":"2019-08-06","link":"https://rileyjshaw.commit--blog.com/rileyjshaw/rileyjshaw.github.io/5bd325e113ac998737005467529f93aed8791f45","repo":"rileyjshaw/rileyjshaw.github.io","description":"<p>I love the tidal wave of projects on <a href=\"/lab\">/lab</a>, and I want to emphasize that for v3.0 of the website. I update pages across the web daily; Glitch, Codepen, gist.github.com, Dwitter, Hackster, etc. Plus there's social media…</p><p>I'm okay with manual curation for the most part, but for websites like Dwitter where contributions are inherently unpolished / untitled, it doesn't make sense for me to hand-pick and manually update a giant list.</p><p>Also: I'm not sure how long Dwitter will be around for. Periodically saving the underlying code / images / etc. gives me more ownership over the presentation and preservation of my data. It changes my relationship with these sites from content hosts to publishing platforms. That makes me feel more secure with my zillion links.</p>","more":true},{"uid":"COMMIT_9A31D93C0803DDB1B2E0FD9208451686011472B7","title":"Add gallery posts and some cellular automata","date":"2019-08-01","link":"https://rileyjshaw.commit--blog.com/rileyjshaw/rileyjshaw.github.io/9a31d93c0803ddb1b2e0fd9208451686011472b7","repo":"rileyjshaw/rileyjshaw.github.io","description":"<p>I've decided to upgrade my website! The <a href=\"/blog\">blog</a> and <a href=\"/lab\">lab</a> are moving to the same page. I'm also going to add more content types, like songs, galleries, and videos. As I migrate things over, I'll be backfilling my blog with content to test with.</p><p>The CA post is an example of filler content.</p>","more":false},{"uid":"COMMIT_931445B47DA28BD836E1D5A92EF0A9627EB244DB","title":"Fix #3: Update min and max to sensible defaults","date":"2019-04-05","link":"https://rileyjshaw.commit--blog.com/rileyjshaw/Servo/931445b47da28bd836e1d5a92ef0a9627eb244db","repo":"rileyjshaw/Servo","description":"<p>R/C servos have a standard pulse width range of 1000 to 2000µs<sup name=\"user-content-a1\"><a href=\"#f1\">1</a></sup>, with the zero point between the two at 1500µs. Currently, Arduino's Servo library sets:</p><ul>\n<li><a href=\"https://github.com/arduino-libraries/Servo/blob/4970d615a13f4c0d08026ee361cc8a01974924a2/src/Servo.h#L80\" rel=\"noopener noreferrer\" target=\"_blank\"><code>#define MIN_PULSE_WIDTH 544</code></a></li>\n<li><a href=\"https://github.com/arduino-libraries/Servo/blob/4970d615a13f4c0d08026ee361cc8a01974924a2/src/Servo.h#L81\" rel=\"noopener noreferrer\" target=\"_blank\"><code>#define MAX_PULSE_WIDTH 2400</code></a></li>\n<li><a href=\"https://github.com/arduino-libraries/Servo/blob/4970d615a13f4c0d08026ee361cc8a01974924a2/src/Servo.h#L82\" rel=\"noopener noreferrer\" target=\"_blank\"><code>#define DEFAULT_PULSE_WIDTH 1500</code></a></li>\n</ul><p>This causes a lot of confusion<sup name=\"user-content-a2\"><a href=\"#f2\">2</a></sup>, especially since [the docs say <code>write(90)</code> should correspond to the mid-point] (<a href=\"https://www.arduino.cc/en/Reference/ServoWrite\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.arduino.cc/en/Reference/ServoWrite</a>); in actuality, it results in a call to <code>writeMicroseconds(1472)</code><sup name=\"user-content-a3\"><a href=\"#f3\">3</a></sup>.</p><p>This change adjusts the defaults to align with R/C standards. Specifically,</p><ul>\n<li><code>write(0)</code> now corresponds to the standard min pulse width of 1000µs.</li>\n<li><code>write(90)</code> now corresponds to the standard zero point pulse width, and aligns with the library's <code>DEFAULT_PULSE_WIDTH</code> variable.</li>\n<li><code>write(180)</code> now corresponds to the standard max pulse width of 2000µs.</li>\n</ul>","more":true},{"uid":"COMMIT_36F25F4F3A18BBB048B9BE3B8DC24D65F10EC273","title":"Simplify min, max logic and increase range","date":"2019-04-05","link":"https://rileyjshaw.commit--blog.com/rileyjshaw/Servo/36f25f4f3a18bbb048b9be3b8dc24d65f10ec273","repo":"rileyjshaw/Servo","description":"<p>Different servo models can accept a wide range of pulse widths. Even different servos of the same model might vary a bit. Currently, the Arduino Servo library has a severely restricted hard limit on the pulse widths that can be sent to servos. Specifically:</p><ul>\n<li>Minimum pulse width must be between [32, 1052].</li>\n<li>Maximum pulse width must be between [1888, 2908].</li>\n</ul><p>Many popular servos have min/max pulse widths that fall in that unavailable range between (1052, 1888). For instance, the <a href=\"https://parallax.com/sites/default/files/downloads/900-00360-Feedback-360-HS-Servo-v1.2.pdf\" rel=\"noopener noreferrer\" target=\"_blank\">Parallax Feedback 360° High-Speed Servo</a> operates between [1280, 1720].</p><p>Before this commit, each instance of <code>Servo</code> stored their <code>min</code> and <code>max</code> values as <code>int8_t</code>. Since that only leaves room for values in the range [-128, 127], it can't store meaningful servo pulse widths, which are typically in the ~[1000, 2000]µs range. To compensate, <code>min</code> and <code>max</code> store the distance from the default values, divided by 4…</p>","more":true},{"uid":"COMMIT_AC98244CC4F551C3BE62F62340E13BF50B89F508","title":"Update `performance.now()` compatibility table to match rest of article","date":"2019-04-05","link":"https://rileyjshaw.commit--blog.com/rileyjshaw/browser-compat-data/ac98244cc4f551c3be62f62340e13bf50b89f508","repo":"rileyjshaw/browser-compat-data","description":"<p>As mentioned in <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/now\" rel=\"noopener noreferrer\" target=\"_blank\">https://developer.mozilla.org/en-US/docs/Web/API/Performance/now</a>:</p><blockquote>\n<p>Firefox started rounding to 1 millisecond in Firefox 60.</p>\n</blockquote><p>This commit updates the <code>performance.now()</code> compatibility table to match the rest of the article.</p>","more":false}]}},"pageContext":{"internalLimit":0,"internalSkip":3,"externalLimit":5,"externalSkip":22,"numPages":16,"currentPage":6}},"staticQueryHashes":["63159454"],"slicesMap":{}}