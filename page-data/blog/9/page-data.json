{"componentChunkName":"component---src-templates-blog-list-jsx","path":"/blog/9","result":{"data":{"allMdx":{"nodes":[{"description":"Today we hiked the Kalalau Trail and swam beneath the cold spray of a waterfall. Today we discussed the finer points of the axolotl protocol used by TextSecure.\n\nToday we delighted in “shave ice”, a local delicacy that is definitely not a snow cone.\n\nToday we wrote copy, polished features, closed bugs, and merged pull-requests.\n\nMeasured by lines of code, today was short. Measured by steps taken, it was tall. Measured by ideas discussed, things learned, and sights seen, it was towering.\n\nFor the past week and a half I’ve been trapped on an island among a team of brilliant hackers. A curious duality exists on the island. At sunrise, stand…","more":true,"frontmatter":{"tags":["security","life","web"]},"fields":{"uid":"POST_THE_POOL_ON_THE_ROOF_MUST_HAVE_A_LEAK","slug":"/blog/the-pool-on-the-roof-must-have-a-leak","title":"The pool on the roof must have a leak","date":"2015-01-21"}},{"description":"There’s something magical about a procedure that just works. Even if you don’t understand why it works, having a set of steps that will always get you to the same destination feels nice. In life there are few patterns that consistently produce the same outcome. But in math? Hoo boy… This post takes us through two very simple procedures that converge to a numerical endpoint. We’re going to graph the amount of time it takes to reach this endpoint, which actually ends up being quite pretty.\n\nCareful; such routines can be somewhat of a rabbit hole. As xkcd’s Randall Munroe puts it,\n\nThe Collatz Conjecture states that if you pick a number, and if it’s even divide it by two and if it’s odd…","more":true,"frontmatter":{"tags":["math","hobby","build"]},"fields":{"uid":"POST_GRAPHING_DEPTH","slug":"/blog/graphing-depth","title":"Graphing depth","date":"2014-12-04"}},{"description":"History-sniffing attacks let front-end code peek at other sites you’ve visited. They can be used to target ads, steal information, or discern your identity. Creepy. Historically, one of the most popular history-sniffing techniques was to style  links using CSS and check their color with JavaScript. Major browsers started implementing privacy changes to address this attack in 2010.1 As a result, JavaScript’s  now returns unvisited styles for visited sites.\n\nEven with these limitations there are a number of ways to scrape a user’s…","more":true,"frontmatter":{"tags":["security","css","build"]},"fields":{"uid":"POST_STEALING_HISTORY_WITH_CSS_BINARY_TREES","slug":"/blog/stealing-history-with-CSS-binary-trees","title":"Stealing history with CSS binary trees","date":"2014-11-12"}}]},"allCombinedProjectsJson":{"nodes":[]}},"pageContext":{"internalLimit":3,"internalSkip":9,"externalLimit":0,"externalSkip":15,"numPages":13,"currentPage":9}},"staticQueryHashes":["63159454"],"slicesMap":{}}