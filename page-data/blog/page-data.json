{"componentChunkName":"component---src-templates-blog-list-js","path":"/blog","result":{"data":{"allMdx":{"edges":[]},"allCombinedProjectsJson":{"nodes":[{"uid":"COMMIT_1C9CEEF36F4FEF69FD3A20B65414DE774F3BF3E1","title":"Feature: add a dark theme","date":"2021-03-06","link":"https://rileyjshaw.commit--blog.com/rileyjshaw/rileyjshaw.github.io/1c9ceef36f4fef69fd3a20b65414de774f3bf3e1","repo":"rileyjshaw/rileyjshaw.github.io","description":"<p>Dark themes are something I’ve sought since my early days on a computer. I remember finding a way to apply a black background to Microsoft Word 2003, then being horrified when I accidentally printed the document. In uni I scripted my desktop to boot into <a href=\"https://justgetflux.com/\" rel=\"noopener noreferrer\" target=\"_blank\">f.lux</a>’s darkroom mode. One of my only lasting contributions to <a href=\"/blog/the-pool-on-the-roof-must-have-a-leak\">Signal</a> was loudly advocating for dark mode on iOS and Desktop, not just Android. I even <a href=\"https://chrome.google.com/webstore/detail/dark-theme-everywhere/nibjplbnmmklkfnkpecgbffkifmdbjed\" rel=\"noopener noreferrer\" target=\"_blank\">made a browser extension in 2015</a> to apply a dark theme to the entire Internet.</p>\n<p>It’s not the most pressing or exciting work, but I decided my site should have a dark theme of its own. I took a lot of inspiration from my former Khan Academy teammate <a href=\"https://www.joshwcomeau.com/react/dark-mode/\" rel=\"noopener noreferrer\" target=\"_blank\">Josh W. Comeau’s dark mode post</a>, with a few differences.</p>\n<p>UI-wise, I decided to go a different route than a binary toggle between dark and light. There were three motivations behind this. From most to least important:</p>\n<ul>\n<li>I wanted to include a “system” option. Theming is still a fresh concept for most web users, so I think it’s worthwhile to expose a way to control theme, motion, brightness etc from within the webpage. But <a href=\"https://kilianvalkhof.com/2020/design/your-dark-mode-toggle-is-broken\" rel=\"noopener noreferrer\" target=\"_blank\">there should <em>always</em> be a simple way to revert back to your system’s display preferences</a>.</li>\n<li>I may add more options later (greyscale? low-res? melty??) and this leaves my options open and unlimited.</li>\n<li>I liked the animated eyeball idea.</li>\n</ul>\n<p>Speaking of the animated eyeball… I’m happy with how it turned out! It was quite a deep dive, since I didn’t want to include a heavy animation library like <a href=\"https://www.react-spring.io/\" rel=\"noopener noreferrer\" target=\"_blank\">react-spring</a> (&gt;25kb) or <a href=\"https://www.framer.com/motion/\" rel=\"noopener noreferrer\" target=\"_blank\">Framer Motion</a> (&gt;90kb). <strong>Thankfully, the coolest thing I learned while working on this feature is that <a href=\"https://css-tricks.com/guide-svg-animations-smil/\" rel=\"noopener noreferrer\" target=\"_blank\">SVG has a declarative animation specification called SMIL</a>!</strong> It didn’t take long to pick up, and it’s very easy to work with. I’m really happy to add it to my toolkit.</p>\n<p>Animations were the <em>coolest</em> deep dive, but they weren’t the deepest. Back when I started building this website, I split the header into Cyan, Magenta, and Yellow (CMY) channels. They <a href=\"/blog/your-art-teacher-lied\">combined subtractively</a> to make a black-ish color, which I used across the site for text. I removed that feature in late 2019, but recently added it back.</p>\n<p>With a single theme, that’s three combinations, for a total of 7 colors. With two themes… the combinations explode a bit.</p>\n<p>I use <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode\" rel=\"noopener noreferrer\" target=\"_blank\">mix-blend-modes</a> to combine colors, of which there are limited options. For my initial color palettes, I wanted to pick three pretty primary colors (light: CMY, dark: RGB) that would blend into three pretty secondary colors (light: RGB, dark: CMY), and all blend together into something with enough contrast from the background to use as body text. Tall order! <a href=\"https://github.com/rileyjshaw/palette-test-tool\" rel=\"noopener noreferrer\" target=\"_blank\">So I built a tool for that</a>, and spent a few idle hours tweaking settings until I was happy.</p>\n<p>And the initial palettes are… pretty good? I wish I was more thrilled with the result, but there are so many conflicting requirements that it’s impossible to get a result as good as if I’d hand-picked the colors independently. I’ve done an initial a11y pass of the colors, and there are some areas of the site where I want to improve the contrast. So I’ll probably end up with a palette split between the “true” colors, and their slightly modified, more attractive cousins.</p>\n<p>I also needed to add a global settings provider in this commit. Now that I’ve done the work for that, look forward to more settings (reduce motion, contrast preference, block embeds… cheat codes??) coming soon!</p>\n<p>I made a few minor changes while working on this commit:</p>\n<ul>\n<li>Update a bunch of the site doodles to fit either theme.</li>\n<li>Share theme colors between CSS-land and JS-land. No more mismatches!</li>\n<li>Keep the <code>&lt;Layout&gt;</code> component mounted between pages. Transitions and performance will be just <em>sliiightly</em> smoother.</li>\n<li>Clarify the color variables a bit; <code>--cb</code> is now <code>--color-blue</code>. - Add theme-dynamic color variables. For instance, <code>--color-p1</code> (“primary one”) maps to <code>--color-red</code> in dark mode and <code>--color-cyan</code> in light mode.</li>\n<li>Update some non-standard colors (eg. scaling faders demo) to fit the new palettes.</li>\n<li>Super simplify state-handling in the site nav (fixes a persistent console error).</li>\n<li>Standardize the handling of <code>localStorage</code> and <code>sessionStorage</code>.</li>\n</ul>\n<p>Hope you enjoy!</p>","more":true},{"uid":"COMMIT_4B18FF55171E5682F287A9825794B733C6FDDC20","title":"The responsive edit","date":"2021-02-26","link":"https://rileyjshaw.commit--blog.com/rileyjshaw/font-comparison-tool/4b18ff55171e5682f287a9825794b733c6fddc20","repo":"rileyjshaw/font-comparison-tool","description":"<p>Another big one:</p>\n<ul>\n<li><strong>Wrote a Puppeteer script to render, measure, sort, and save fonts, sorted by height, width, and height x width</strong></li>\n<li><strong>Made row height fit the biggest displayed font cell, and nColumns responsive to window width</strong></li>\n<li>Removed <code>AutoSizer</code>; swapped it for a simpler <code>useSize</code> hook</li>\n<li>Added <code>yarn update-fonts</code> to automatically download, measure, and update fonts</li>\n<li>Improved the placeholder text behaviour, and added some variety</li>\n<li>Updated Google Fonts</li>\n</ul>","more":false},{"uid":"COMMIT_097837CFA4965A10DCCF160A5E046042F59FED8C","title":"The performance edit: part 2","date":"2021-02-23","link":"https://rileyjshaw.commit--blog.com/rileyjshaw/font-comparison-tool/097837cfa4965a10dccf160a5e046042f59fed8c","repo":"rileyjshaw/font-comparison-tool","description":"<p>(Part 1 was <a href=\"https://github.com/rileyjshaw/font-comparison-tool/commit/c9bfc9788212e54a4c2e428bb3d5fd9b04add8f7\" rel=\"noopener noreferrer\" target=\"_blank\"><tt>c9bfc97</tt></a>)</p>\n<p>Wow. After these two commits, this feels like a completely different app. It’s so speedy!</p>\n<h2>Background</h2>\n<p>Last commit, I focused on eliminating unnecessary FontContainer re-renders. This wasn’t a big priority at first… until I added Google’s catalog of &gt; 1000 fonts. Ever since, performance has crawled whenever that category is selected.</p>\n<p>I decided to tighten up my own render code first because I knew that after enclosing the list in a virtual scroller, performance would be okay enough. And then I’d be less motivated by the sluggish, practically unusable Google Fonts viewer.</p>\n<p>And I'm happy I did! <code>react-window</code> made a huge difference. With the improved render tree <em>and</em> virtualized scrolling, this app somehow makes loading, displaying, and live-editing the preview of &gt; 1000 webfonts pretty smooth.</p>\n<h2>Changelog</h2>\n<p>Specific big changes in this commit:</p>\n<ul>\n<li>Enclose the preview grid in a virtualized scroller (<code>react-window</code>)</li>\n<li>Rework the font-loading pipeline to only download new fonts once they’re near the viewport</li>\n<li>Supporting UI and layout changes</li>\n</ul>\n<hr>\n<p>There may be a performance edit: part 3, but… there’s not much need for the time being.</p>","more":true},{"uid":"COMMIT_20C08F1F73C6A69CD5B6135C036FBEA969208A58","title":"Improved version for 2021","date":"2021-02-18","link":"https://rileyjshaw.commit--blog.com/rileyjshaw/palette-test-tool/20c08f1f73c6a69cd5b6135c036fbea969208a58","repo":"rileyjshaw/palette-test-tool","description":"<p>I recently added a color channel splitter back into my site header, so I dusted off this project. I’m finally settling on a standard palette. This was further motivated by adding a dark theme to my site.</p>\n<p>Some improvements since 2018:</p>\n<ul>\n<li>Moved this out of the rileyjshaw.github.io repo into its own project</li>\n<li>Improved UX around color-editing to something much quicker</li>\n<li>Updated UI to show all colors and blend variants on screen at once</li>\n<li>Added a toggle to show / hide secondary colors</li>\n<li>Added saving / export tools</li>\n<li>Added a toggle for dark mode, and separate state for the two palettes</li>\n<li>Added a toggle to test different blend modes on the fly</li>\n<li>Added a button to test live on rileyjshaw.com</li>\n<li>Simplified code structure, added some dependencies, broke files out</li>\n<li>Improved tooling</li>\n</ul>","more":false},{"uid":"COMMIT_C9BFC9788212E54A4C2E428BB3D5FD9B04ADD8F7","title":"The performance edit: part 1","date":"2021-02-08","link":"https://rileyjshaw.commit--blog.com/rileyjshaw/font-comparison-tool/c9bfc9788212e54a4c2e428bb3d5fd9b04add8f7","repo":"rileyjshaw/font-comparison-tool","description":"<ul>\n<li>Memoize the FontContainer component, and its callbacks</li>\n<li>Update size and alignment with CSS variables, not props</li>\n</ul>\n<p>It’s scrolling way better now, and changing font size with Google Fonts over no-longer causes an explosion.</p>\n<p>Next up: <code>react-window</code>, keep the <a href=\"https://github.com/font-face\" rel=\"noopener noreferrer\" target=\"_blank\">@font-face</a> declarations to woff2? only</p>","more":false}]}},"pageContext":{"internalLimit":0,"internalSkip":0,"externalLimit":5,"externalSkip":0,"numPages":16,"currentPage":1}},"staticQueryHashes":["3605882644"]}