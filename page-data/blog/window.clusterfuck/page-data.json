{"componentChunkName":"component---src-templates-post-js","path":"/blog/window.clusterfuck","result":{"data":{"markdownRemark":{"html":"<p>I started a project called <a href=\"https://github.com/rileyjshaw/terra\" target=\"_blank\" rel=\"noopener noreferrer\">Terra</a> a few weeks ago. I added a conditional to <code class=\"language-javascript\">init()</code> that would complain if I'd already defined the library:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exports</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>exports<span class=\"token punctuation\">.</span>terra<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// do initialization things</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token string\">\"You've already defined terra. Pay attention..\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// more stuff happens...</span>\n\n\t<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I'll admit that this is a really ugly pattern for handling namespaces, but <a href=\"#what-does-it-all-mean\">even common patterns are affected by this</a>. Let me take you on a journey through <strong>the biggest browser <a href=\"https://www.destroyallsoftware.com/talks/wat\" target=\"_blank\" rel=\"noopener noreferrer\">wat</a> I've ever seen.</strong></p>\n<p>I ran the code and the console yelled at me.</p>\n<p><code class=\"error\">\"You've already defined terra. Pay attention..\"</code></p>\n<p>Strange... but maybe I forgot a <code class=\"language-javascript\">var</code> somewhere. I set some breakpoints in DevTools and stepped through the execution.</p>\n<ol>\n<li>The main IIFE is called</li>\n<li>Some local variables are defined</li>\n<li>init() is called.. wait, did I miss something?</li>\n<li>window.terra is already defined????!!?!!!?!?!?!?!</li>\n<li>Error is thrown, I get confused.</li>\n</ol>\n<p>The only scripts on the page were ones that I'd written, and I definitely hadn't defined <code class=\"language-javascript\">terra</code>. I switched to a new branch and deleted almost everything.</p>\n<div class=\"gatsby-highlight\" data-language=\"markup\"><pre class=\"language-markup\"><code class=\"language-markup\"><span class=\"token doctype\">&lt;!doctype html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Terra<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>terra<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span> <span class=\"token parameter\">exports</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">function</span> <span class=\"token function\">init</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>exports<span class=\"token punctuation\">.</span>terra <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'Everything is awesome.'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'The night is dark and full of terrors.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Do you see it? I didn't yet, and was hella confused when the console returned:</p>\n<p><code class=\"console\">The night is dark and full of terrors.</code></p>\n<p>So I made it simpler:</p>\n<div class=\"gatsby-highlight\" data-language=\"markup\"><pre class=\"language-markup\"><code class=\"language-markup\"><span class=\"token doctype\">&lt;!doctype html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Terra<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>terra<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>window<span class=\"token punctuation\">.</span>terra <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>...and got:</p>\n<p><code class=\"console\">False</code></p>\n<p>Either someone had added a global property called <code class=\"language-javascript\">terra</code> to the latest build of Chrome, or it was adding that <code class=\"language-markup\">&#x3C;div id=\"terra\"></code> to the global namespace. But... that would be insane. Browsers wouldn't add element IDs to <code class=\"language-markup\">window</code>, would they?</p>\n<h2 id=\"they-would\"><a href=\"#they-would\" aria-label=\"they would permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>They would.</h2>\n<p>I tried Firefox. Defined. I tried Safari. Defined. I tried IE. Super-duper defined. The room was spinning; I had read the scriptures of Crockford and Resig and this was blasphemy. How many times had I inadvertently defined <code class=\"language-javascript\">window.test</code>, <code class=\"language-javascript\">window.baz</code>, <code class=\"language-javascript\">window.boobies</code>...</p>\n<h2 id=\"digging-deeper\"><a href=\"#digging-deeper\" aria-label=\"digging deeper permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Digging deeper</h2>\n<p>Unsurprisingly, it seems that Internet Explorer can be thanked for this awesome \"feature\". Other browsers felt compelled to follow suit, and soon enough the behaviour made it into <a href=\"http://www.whatwg.org/specs/web-apps/current-work/#named-access-on-the-window-object\" target=\"_blank\" rel=\"noopener noreferrer\">the official HTML spec</a>.</p>\n<blockquote>\n<p>The Window interface supports named properties. The supported property names at any moment consist of the following, in tree order, ignoring later duplicates:</p>\n<ul>\n<li>the browsing context name of any child browsing context of the active document whose name is not the empty string,</li>\n<li>the value of the name content attribute for all a, applet, area, embed, form, frameset, img, and object elements in the active document that have a non-empty name content attribute, and</li>\n<li>the value of the id content attribute of any HTML element in the active document with a non-empty id content attribute.</li>\n</ul>\n</blockquote>\n<p>So, there you have it. <strong>Any elements with an <code class=\"language-markup\">id</code> or <code class=\"language-markup\">name</code> attribute will have a reference in the global namespace.</strong></p>\n<h2 id=\"what-does-it-all-mean\"><a href=\"#what-does-it-all-mean\" aria-label=\"what does it all mean permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What does it all mean?</h2>\n<p>Firstly, this does <strong>not</strong> make it okay for you to start interacting with the DOM using these variables. Cross-browser implementations are shaky, and hopefully at some point this will fade out of the spec. On top of that, any newly defined globals will overwrite these references. Stick with <code class=\"language-javascript\">document.getElementById()</code> and <code class=\"language-javascript\">document.getElementsByName()</code>. Or <code class=\"language-javascript\">$()</code>, if you're into that sort of thing.</p>\n<p>These element references likely won't cause you any trouble, especially if you're being a good neighbor in the global namespace. If you're using browserify (<a href=\"https://scott.mn/2014/03/03/javascript_modules/\" target=\"_blank\" rel=\"noopener noreferrer\">which you should be</a>), RequireJS, or any strict module system, just pick specific global variable names and kept them to a minimum.</p>\n<p><em>Weird stuff can happen</em> if there's a collision; let's take a look at the 5 most common namespace-checking patterns for object literals:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*\nOption 1: var myApplication = myApplication || {};\nOption 2  if(!MyApplication) MyApplication = {};\nOption 3: var myApplication = myApplication = myApplication || {}\nOption 4: myApplication || (myApplication = {});\nOption 5: var myApplication = myApplication === undefined ? {} : myApplication;\n*/</span></code></pre></div>\n<p>Options 1, 3, and 5 shadow <code class=\"language-javascript\">myApplication</code> with the initial <code class=\"language-javascript\">var</code> declaration, so you'll end up with <code class=\"language-javascript\">myApplication</code> equal to <code class=\"language-javascript\">{}</code>. Option 2 and 4 though? Not so lucky. Since there's no <code class=\"language-javascript\">var</code> shadowing the variable, these patterns leave you with a DOM element sitting in place of your fresh new object. As soon as you try to iterate over the object's properties or run one of its methods, you're working with a different object than the one you expected.</p>\n<p>Here a few more ways that these new variables can get you in trouble (assuming here that we've defined an element with <code class=\"language-markup\">name=\"ticker\"</code>):</p>\n<h3 id=\"checking-for-existence\"><a href=\"#checking-for-existence\" aria-label=\"checking for existence permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Checking for existence</h3>\n<p>As we saw earlier, conditional code such as</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>window<span class=\"token punctuation\">.</span>ticker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\twindow<span class=\"token punctuation\">.</span>ticker <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nwindow<span class=\"token punctuation\">.</span>ticker<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Can cause all sorts of errors and heartbreak down the road. <a href=\"#2014-03-12\">Here's a safer way to check</a>!</p>\n<h3 id=\"misspelling\"><a href=\"#misspelling\" aria-label=\"misspelling permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Misspelling</h3>\n<p>All of a sudden,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> picker <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\npicker<span class=\"token punctuation\">.</span>item1 <span class=\"token operator\">=</span> <span class=\"token string\">'Corn Flakes'</span><span class=\"token punctuation\">;</span>\nticker<span class=\"token punctuation\">.</span>item2 <span class=\"token operator\">=</span> <span class=\"token string\">'Buttons'</span><span class=\"token punctuation\">;</span>\npicker<span class=\"token punctuation\">.</span>item3 <span class=\"token operator\">=</span> <span class=\"token string\">'Hair'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Doesn't throw a ReferenceError and the property we <em>meant</em> to interact with isn't touched.</p>\n<h3 id=\"blocking-external-libraries\"><a href=\"#blocking-external-libraries\" aria-label=\"blocking external libraries permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Blocking external libraries</h3>\n<p>Sadly, you don't have much control over this one. Other developers who aren't as enlightened as me and you may write their libraries in such a way that named element references can block their initialization. A good way to avoid this is to</p>\n<ol>\n<li>avoid using <code class=\"language-markup\">id</code>s with the same name as libraries you're using (duh), and</li>\n<li>post an issue to the library's repository mentioning that their library isn't safe for loose-cannon-element-namers.</li>\n</ol>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>Though the globalization of element <code class=\"language-markup\">id</code>s and <code class=\"language-markup\">name</code>s really surprised me, the fact that it gets such little attention means that it's probably not a huge deal. Regardless, <strong>adding all of these variables to the global namespace has no real advantage, and allows developers to make mistakes that are really annoying to debug.</strong> Apart from maintaining legacy code written by the few people who use this rule, I can't see any reason to keep the behaviour in modern browsers.</p>\n<p>For now just keep smiling, and let's all hope that someday soon we'll be rid of them.</p>\n<h2 id=\"addendums\"><a href=\"#addendums\" aria-label=\"addendums permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Addendums</h2>\n<h3 id=\"2014-03-12\"><a href=\"#2014-03-12\" aria-label=\"2014 03 12 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2014-03-12</h3>\n<p>Redditor <a href=\"http://www.reddit.com/r/webdev/comments/2023ex/windowclusterfuck_a_tale_of_global_variables/cfz7qb9\" target=\"_blank\" rel=\"noopener noreferrer\">minrice2099</a> <a href=\"https://github.com/mtackes\" target=\"_blank\" rel=\"noopener noreferrer\"><i class=\"fa fa-github\"></i></a> came up with a clever way to check if a variable comes from a named element. Checking <code class=\"language-javascript\">x in Object.keys( window )</code> will return <code class=\"language-javascript\">True</code> if <code class=\"language-javascript\">x</code> is defined explicitly (with <code class=\"language-javascript\">var</code> or <code class=\"language-javascript\">window.</code>) or is inherited through the prototype chain; otherwise, it will return <code class=\"language-javascript\">False</code>. This is different than checking <code class=\"language-javascript\">.hasOwnProperty</code> because it will respect properties found up the prototype chain.</p>\n<p>From here, we can check existence using:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>x <span class=\"token keyword\">in</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// do as you must...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This works in all modern browsers, but use at your own risk if you're looking to support past / future browsers.</p>","fields":{"date":"March 10, 2014","slug":"/blog/window.clusterfuck","title":"window.clusterFuck"}}},"pageContext":{}}}